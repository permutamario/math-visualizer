# How to Create a Plugin for the Math Visualization Framework

This guide walks you through the process of creating a new visualization plugin for the Math Visualization Framework.

## Prerequisites

- Basic knowledge of JavaScript and Canvas API
- Understanding of the framework's hook system
- Familiarity with JSON for configuration

## Plugin Structure

Each plugin consists of two main files:

1. **index.js** - The plugin implementation
2. **manifest.json** - Plugin metadata and configuration

## Step 1: Create Plugin Directory

Create a new directory for your plugin in the `src/plugins/` folder:

```
src/plugins/myVisualization/
```

## Step 2: Create manifest.json

Create a `manifest.json` file with the following structure:

```json
{
  "id": "myVisualization",
  "name": "My Visualization",
  "version": "1.0.0",
  "description": "A custom visualization for the Math Visualization Framework",
  "author": "Your Name",
  "minFrameworkVersion": "1.0.0",
  "defaultSettings": {
    "parameterOne": 100,
    "parameterTwo": "#ff0000",
    "parameterThree": 1.0,
    "backgroundColor": "#f5f5f5",
    "showBorder": true,
    "borderColor": "#000000",
    "borderWidth": 2
  },
  "uiCategories": [
    {
      "id": "structural",
      "label": "Structural Parameters",
      "settings": ["parameterOne"]
    },
    {
      "id": "visual",
      "label": "Visual Parameters",
      "settings": ["parameterTwo", "parameterThree", "backgroundColor", "showBorder", "borderColor", "borderWidth"]
    }
  ],
  "exportOptions": [
    {
      "id": "export-png",
      "label": "Export PNG",
      "type": "export"
    },
    {
      "id": "reset-settings",
      "label": "Reset Settings",
      "type": "export"
    }
  ]
}
```

## Step 3: Create index.js

Create an `index.js` file with this basic structure:

```javascript
/**
 * Plugin entry point
 * @param {Object} core - Core APIs provided by the framework
 */
export default function initMyVisualizationPlugin(core) {
  const { hooks, state } = core;
  
  console.log("Initializing My Visualization plugin");
  
  // Define settings metadata
  const mySettingsMetadata = {
    // Visual settings
    backgroundColor: { 
      type: 'visual', 
      label: 'Background Color', 
      control: 'color', 
      default: '#f5f5f5' 
    },
    parameterTwo: { 
      type: 'visual', 
      label: 'Parameter Two', 
      control: 'color', 
      default: '#ff0000' 
    },
    parameterThree: { 
      type: 'visual', 
      label: 'Parameter Three', 
      control: 'slider', 
      min: 0, 
      max: 1, 
      step: 0.01, 
      default: 1.0 
    },
    showBorder: { 
      type: 'visual', 
      label: 'Show Border', 
      control: 'checkbox', 
      default: true 
    },
    borderColor: { 
      type: 'visual', 
      label: 'Border Color', 
      control: 'color', 
      default: '#000000' 
    },
    borderWidth: { 
      type: 'visual', 
      label: 'Border Width', 
      control: 'number', 
      min: 0, 
      max: 20, 
      step: 1, 
      default: 2 
    },
    
    // Structural settings
    parameterOne: { 
      type: 'structural', 
      label: 'Parameter One', 
      control: 'slider', 
      min: 10, 
      max: 300, 
      step: 1, 
      default: 100 
    }
  };
  
  // Register with visualization system
  hooks.addFilter('availableVisualizations', 'myVisualization', (visualizations) => {
    return [...visualizations, {
      id: 'myVisualization',
      name: 'My Visualization',
      description: 'A custom visualization'
    }];
  });
  
  // Register render function
  hooks.addAction('render', 'myVisualization', (ctx, canvas, settings) => {
    if (state.getState().activePluginId === 'myVisualization') {
      renderMyVisualization(ctx, canvas, settings);
    }
  });
  
  // Register UI controls
  hooks.addFilter('settingsMetadata', 'myVisualization', (metadata) => {
    console.log("My Visualization plugin providing settings metadata");
    return mySettingsMetadata;
  });
  
  // Register export options
  hooks.addFilter('exportOptions', 'myVisualization', (options) => {
    return [
      {
        id: 'export-png',
        label: 'Export PNG',
        type: 'export'
      },
      {
        id: 'reset-settings',
        label: 'Reset Settings',
        type: 'export'
      }
    ];
  });
  
  // Register default settings
  hooks.addFilter('defaultSettings', 'myVisualization', (settings) => {
    return {
      parameterOne: 100,
      parameterTwo: '#ff0000',
      parameterThree: 1.0,
      backgroundColor: '#f5f5f5',
      showBorder: true,
      borderColor: '#000000',
      borderWidth: 2
    };
  });
  
  // Handle setting changes
  hooks.addAction('onSettingChanged', 'myVisualization', ({ path, value }) => {
    console.log(`My Visualization plugin: Setting changed ${path} = ${value}`);
  });
  
  // Register activation handler
  hooks.addAction('activatePlugin', 'myVisualization', ({ pluginId }) => {
    if (pluginId === 'myVisualization') {
      console.log("My Visualization plugin activated");
    }
  });
  
  console.log("My Visualization plugin initialized");
}

/**
 * Render the visualization
 * @param {CanvasRenderingContext2D} ctx - Canvas context
 * @param {HTMLCanvasElement} canvas - Canvas element
 * @param {Object} settings - Current settings
 */
function renderMyVisualization(ctx, canvas, settings) {
  // Get properties from settings
  const paramOne = settings.parameterOne || 100;
  const paramTwo = settings.parameterTwo || '#ff0000';
  const paramThree = settings.parameterThree || 1.0;
  const showBorder = settings.showBorder !== undefined ? settings.showBorder : true;
  const borderColor = settings.borderColor || '#000000';
  const borderWidth = settings.borderWidth || 2;
  
  // Position in center of canvas
  const x = canvas.width / 2;
  const y = canvas.height / 2;
  
  // Save the current context state
  ctx.save();
  
  // Move to the center position
  ctx.translate(x, y);
  
  // Set transparency
  ctx.globalAlpha = paramThree;
  
  // Draw your visualization here
  // This is just a placeholder - replace with your visualization code
  ctx.beginPath();
  ctx.moveTo(0, -paramOne);
  ctx.lineTo(paramOne, 0);
  ctx.lineTo(0, paramOne);
  ctx.lineTo(-paramOne, 0);
  ctx.closePath();
  
  ctx.fillStyle = paramTwo;
  ctx.fill();
  
  // Draw border if enabled
  if (showBorder) {
    ctx.strokeStyle = borderColor;
    ctx.lineWidth = borderWidth;
    ctx.stroke();
  }
  
  // Restore the context state
  ctx.restore();
}
```

## Step 4: Register your Plugin

Update the `pluginManager.js` file to include your new plugin:

1. Import your plugin:
```javascript
import initMyVisualizationPlugin from '../plugins/myVisualization/index.js';
```

2. Add your plugin to the PLUGINS array:
```javascript
const PLUGINS = [
  // Existing plugins...
  {
    id: 'myVisualization',
    name: 'My Visualization',
    description: 'A custom visualization',
    init: initMyVisualizationPlugin,
    manifest: {
      defaultSettings: {
        parameterOne: 100,
        parameterTwo: '#ff0000',
        parameterThree: 1.0,
        backgroundColor: '#f5f5f5',
        showBorder: true,
        borderColor: '#000000',
        borderWidth: 2,
      }
    }
  }
];
```

## Step 5: Test Your Plugin

1. Open the application in your browser
2. Your plugin should appear in the visualization dropdown
3. Select your plugin and check that all controls appear correctly
4. Test that your visualization renders properly
5. Verify that UI controls update your visualization

## Available Control Types

When defining settings metadata, you can use these control types:

- **slider**: Creates a range slider
  ```javascript
  {
    type: 'visual',
    label: 'Opacity',
    control: 'slider',
    min: 0,
    max: 1,
    step: 0.01,
    default: 1.0
  }
  ```

- **checkbox**: Creates a toggle switch
  ```javascript
  {
    type: 'visual',
    label: 'Show Border',
    control: 'checkbox',
    default: true
  }
  ```

- **color**: Creates a color picker
  ```javascript
  {
    type: 'visual',
    label: 'Background Color',
    control: 'color',
    default: '#f5f5f5'
  }
  ```

- **number**: Creates a number input
  ```javascript
  {
    type: 'structural',
    label: 'Width',
    control: 'number',
    min: 0,
    max: 1000,
    step: 1,
    default: 100
  }
  ```

- **dropdown**: Creates a dropdown selector
  ```javascript
  {
    type: 'structural',
    label: 'Shape Type',
    control: 'dropdown',
    options: ['circle', 'square', 'triangle'],
    default: 'circle'
  }
  ```

## Available Hook Points

### Actions (void functions)

- `render`: Called to render the visualization
- `beforeRender`: Called before rendering starts
- `afterRender`: Called after rendering completes
- `onSettingChanged`: Called when a setting changes
- `activatePlugin`: Called when a plugin is activated
- `deactivatePlugin`: Called when a plugin is deactivated

### Filters (modify and return data)

- `availableVisualizations`: Add to the list of available visualizations
- `settingsMetadata`: Define UI controls for settings
- `defaultSettings`: Set default values for settings
- `exportOptions`: Define export options

## Best Practices

1. **Unique IDs**: Ensure your plugin ID is unique across the framework
2. **Namespacing**: Use your plugin ID as the namespace for all hooks
3. **Optimization**: Optimize your rendering code for performance
4. **Error Handling**: Include error handling in your rendering logic
5. **Documentation**: Include comments explaining your visualization
6. **Defaults**: Provide sensible default values for all settings
7. **Cleanup**: Handle plugin deactivation properly

## Advanced Techniques

### Animation

To add animation to your visualization:

```javascript
hooks.addAction('beforeRender', 'myVisualization', (ctx, canvas, settings) => {
  if (state.getState().activePluginId === 'myVisualization' && settings.animation) {
    // Update animation state here
    const newValue = (settings.animationParameter || 0) + 1;
    changeState('settings.animationParameter', newValue % 360);
  }
});
```

### Custom Export Options

Add custom export functionality:

```javascript
hooks.addFilter('exportOptions', 'myVisualization', (options) => {
  return [
    ...options,
    {
      id: 'my-custom-export',
      label: 'Custom Export',
      type: 'export'
    }
  ];
});

// Handle custom export
hooks.addAction('exportAction', 'myVisualization', (actionId) => {
  if (actionId === 'my-custom-export') {
    // Custom export logic here
    return true; // Return true to indicate the action was handled
  }
  return false;
});
```

## Troubleshooting

- **Controls Not Appearing**: Ensure `settingsMetadata` filter is properly implemented
- **Visualization Not Rendering**: Check the `render` action and verify activation
- **Settings Not Applied**: Verify `defaultSettings` filter is correct
- **UI Issues**: Check browser console for errors
- **Plugin Not Loading**: Verify imports in `pluginManager.js`

For more help, enable the debug panel to inspect the application state and errors.