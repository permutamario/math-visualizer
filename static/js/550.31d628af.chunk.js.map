{"version":3,"file":"static/js/550.31d628af.chunk.js","mappings":"yKAIe,MAAMA,UAAsBC,EAAAA,EACzCC,WAAAA,CAAYC,GACVC,MAAMD,EADgBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,kBAIzBG,KAAKC,aAAe,CAAC,EAAG,EAAG,EAAG,EAChC,CAKAC,mBAAAA,GAEEF,KAAKL,OAAOQ,UAAU,SAAU,gBAAYH,KAAKC,aAAa,GAAI,CAAEG,KAAM,EAAGC,IAAK,EAAGC,KAAM,IAAO,cAClGN,KAAKL,OAAOQ,UAAU,SAAU,gBAAYH,KAAKC,aAAa,GAAI,CAAEG,KAAM,EAAGC,IAAK,EAAGC,KAAM,IAAO,cAClGN,KAAKL,OAAOQ,UAAU,SAAU,gBAAYH,KAAKC,aAAa,GAAI,CAAEG,KAAM,EAAGC,IAAK,EAAGC,KAAM,IAAO,cAClGN,KAAKL,OAAOQ,UAAU,SAAU,gBAAYH,KAAKC,aAAa,GAAI,CAAEG,KAAM,EAAGC,IAAK,EAAGC,KAAM,IAAO,aACpG,CAMAC,iBAAAA,GAEE,MAAMC,EAAQ,CACZR,KAAKL,OAAOc,aAAa,WAAaT,KAAKC,aAAa,GACxDD,KAAKL,OAAOc,aAAa,WAAaT,KAAKC,aAAa,GACxDD,KAAKL,OAAOc,aAAa,WAAaT,KAAKC,aAAa,GACxDD,KAAKL,OAAOc,aAAa,WAAaT,KAAKC,aAAa,IAIpDS,EAAQV,KAAKW,aAAaH,GAC1BI,EAAWZ,KAAKa,YAAYH,GAG5BI,EAAOd,KAAKL,OAAOc,aAAa,SAAW,EACjD,OAAOG,EAASG,KAAIC,GAAKA,EAAED,KAAIE,GAASA,EAAQH,KAClD,CAOAH,YAAAA,CAAaO,GACX,OAAIA,EAAIpB,QAAU,EAAU,CAACoB,GACtBA,EAAIC,SAAQ,CAACC,EAAGC,IACrBrB,KAAKW,aAAaO,EAAII,MAAM,EAAGD,GAAGE,OAAOL,EAAII,MAAMD,EAAI,KAAKN,KAAIS,GAAQ,CAACJ,KAAMI,MAEnF,CAOAX,WAAAA,CAAYY,GACV,MACMC,EADMD,EAAO,GAAG3B,OAIhB6B,EAAQ,GACd,IAAK,IAAIN,EAAI,EAAGA,EAAIK,EAAI,EAAGL,IAAK,CAC9B,MAAMO,EAAMC,MAAMH,GAAGI,KAAK,GAC1BF,EAAIP,GAAK,EACTO,EAAIF,EAAI,IAAM,EACdC,EAAMI,KAAKH,EACb,CAGA,MAAMI,EAAahC,KAAKiC,YAAYN,GAAOL,MAAM,EAAG,GAGpD,OAAOG,EAAOV,KAAImB,GAChBF,EAAWjB,KAAIoB,GAAKnC,KAAKoC,IAAIF,EAAGC,MAEpC,CAQAC,GAAAA,CAAIC,EAAGrB,GACL,OAAOqB,EAAEC,QAAO,CAACC,EAAKnB,EAAGC,IAAMkB,EAAMnB,EAAIJ,EAAEK,IAAI,EACjD,CAQAmB,QAAAA,CAASH,EAAGrB,GACV,OAAOqB,EAAEtB,KAAI,CAACK,EAAGC,IAAMD,EAAIJ,EAAEK,IAC/B,CAOAoB,SAAAA,CAAUzB,GACR,MAAM0B,EAAOC,KAAKC,SAAS5B,GAC3B,OAAOA,EAAED,KAAIK,GAAKA,EAAIsB,GACxB,CAOAT,WAAAA,CAAYY,GACV,MAAMC,EAAQ,GACd,IAAK,IAAI9B,KAAK6B,EAAS,CACrB,IAAIR,EAAI,IAAIrB,GACZ,IAAK,IAAI+B,KAAQD,EAAO,CACtB,MAAME,EAAOhD,KAAKoC,IAAIC,EAAGU,GACzBV,EAAIrC,KAAKwC,SAASH,EAAGU,EAAKhC,KAAIK,GAAKA,EAAI4B,IACzC,CACIL,KAAKC,SAASP,GAAK,MACrBS,EAAMf,KAAK/B,KAAKyC,UAAUJ,GAE9B,CACA,OAAOS,CACT,E","sources":["lib/plugins/polytope-viewer/families/OrbitPolytope.js"],"sourcesContent":["// src/plugins/polytope-viewer/families/OrbitPolytope.js\n\nimport PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class OrbitPolytope extends PolytopeFamily {\n  constructor(plugin, name = \"Orbit Polytope\") {\n    super(plugin, name);\n    \n    // Default point value\n    this.defaultPoint = [1, 2, 2, 3];\n  }\n  \n  /**\n   * Add parameters specific to Orbit Polytope\n   */\n  addFamilyParameters() {\n    // Add parameters for the point coordinates\n    this.plugin.addNumber('point1', 'Point X₁', this.defaultPoint[0], { min: -5, max: 5, step: 0.5 }, 'structural');\n    this.plugin.addNumber('point2', 'Point X₂', this.defaultPoint[1], { min: -5, max: 5, step: 0.5 }, 'structural');\n    this.plugin.addNumber('point3', 'Point X₃', this.defaultPoint[2], { min: -5, max: 5, step: 0.5 }, 'structural');\n    this.plugin.addNumber('point4', 'Point X₄', this.defaultPoint[3], { min: -5, max: 5, step: 0.5 }, 'structural');\n  }\n  \n  /**\n   * Calculate vertices for the Orbit Polytope\n   * Generates permutations of a 4D point and projects to 3D\n   */\n  calculateVertices() {\n    // Get the point coordinates from parameters\n    const point = [\n      this.plugin.getParameter('point1') || this.defaultPoint[0],\n      this.plugin.getParameter('point2') || this.defaultPoint[1],\n      this.plugin.getParameter('point3') || this.defaultPoint[2],\n      this.plugin.getParameter('point4') || this.defaultPoint[3]\n    ];\n    \n    // Generate permutations and project to 3D\n    const orbit = this.permutations(point);\n    const vertices = this.projectTo3D(orbit);\n    \n    // Apply size factor from parameters\n    const size = this.plugin.getParameter('size') || 1.0;\n    return vertices.map(v => v.map(coord => coord * size));\n  }\n  \n  /**\n   * Generate all permutations of an array\n   * @param {Array} arr - The array to permute\n   * @returns {Array} Array of permutations\n   */\n  permutations(arr) {\n    if (arr.length <= 1) return [arr];\n    return arr.flatMap((x, i) =>\n      this.permutations(arr.slice(0, i).concat(arr.slice(i + 1))).map(rest => [x, ...rest])\n    );\n  }\n  \n  /**\n   * Project points from a higher dimension to 3D\n   * @param {Array} points - Array of points in higher dimension\n   * @returns {Array} Projected points in 3D\n   */\n  projectTo3D(points) {\n    const dim = points[0].length;\n    const n = dim;\n\n    // Create orthonormal basis of the hyperplane ⟨x⟩ such that ∑x_i = 0\n    const basis = [];\n    for (let i = 0; i < n - 1; i++) {\n      const vec = Array(n).fill(0);\n      vec[i] = 1;\n      vec[n - 1] = -1;\n      basis.push(vec);\n    }\n\n    // Apply Gram-Schmidt orthonormalization\n    const orthoBasis = this.gramSchmidt(basis).slice(0, 3); // Take first 3 orthonormal vectors\n\n    // Project each point onto this basis\n    return points.map(p =>\n      orthoBasis.map(b => this.dot(p, b))\n    );\n  }\n  \n  /**\n   * Calculate dot product of two vectors\n   * @param {Array} u - First vector\n   * @param {Array} v - Second vector\n   * @returns {number} Dot product\n   */\n  dot(u, v) {\n    return u.reduce((sum, x, i) => sum + x * v[i], 0);\n  }\n  \n  /**\n   * Subtract two vectors\n   * @param {Array} u - First vector\n   * @param {Array} v - Second vector\n   * @returns {Array} Resulting vector\n   */\n  subtract(u, v) {\n    return u.map((x, i) => x - v[i]);\n  }\n  \n  /**\n   * Normalize a vector\n   * @param {Array} v - Vector to normalize\n   * @returns {Array} Normalized vector\n   */\n  normalize(v) {\n    const norm = Math.hypot(...v);\n    return v.map(x => x / norm);\n  }\n  \n  /**\n   * Perform Gram-Schmidt orthonormalization\n   * @param {Array} vectors - Array of vectors\n   * @returns {Array} Orthonormal basis\n   */\n  gramSchmidt(vectors) {\n    const ortho = [];\n    for (let v of vectors) {\n      let u = [...v];\n      for (let base of ortho) {\n        const proj = this.dot(u, base);\n        u = this.subtract(u, base.map(x => x * proj));\n      }\n      if (Math.hypot(...u) > 1e-8) {\n        ortho.push(this.normalize(u));\n      }\n    }\n    return ortho;\n  }\n}"],"names":["OrbitPolytope","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","this","defaultPoint","addFamilyParameters","addNumber","min","max","step","calculateVertices","point","getParameter","orbit","permutations","vertices","projectTo3D","size","map","v","coord","arr","flatMap","x","i","slice","concat","rest","points","n","basis","vec","Array","fill","push","orthoBasis","gramSchmidt","p","b","dot","u","reduce","sum","subtract","normalize","norm","Math","hypot","vectors","ortho","base","proj"],"sourceRoot":""}