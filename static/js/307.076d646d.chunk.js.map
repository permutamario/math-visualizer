{"version":3,"file":"static/js/307.076d646d.chunk.js","mappings":"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","sources":["lib/core/BasePlugin.js","lib/core/Plugin3D.js","lib/plugins/polytope-viewer/index.js","lib/plugins/polytope-viewer/families|lazy|/^/.//.*$/|groupOptions: {}|namespace object","lib/plugins/polytope-viewer/PolytopeFamily.js","lib/plugins/polytope-viewer/meshFromFaces.js"],"sourcesContent":["// src/core/BasePlugin.js\n\n/**\n * Abstract base plugin interface for the Math Visualization Framework\n * Provides common functionality independent of rendering environment\n */\nexport class BasePlugin {\n  /**\n   * Create a plugin instance\n   * @param {AppCore} core - Reference to the application core\n   */\n  constructor(core) {\n    // Get metadata from static properties\n    const metadata = this.constructor;\n    \n    // Ensure required properties are present in the class (static properties)\n    if (!metadata.id || !metadata.name || !metadata.renderingType) {\n      throw new Error(\"Plugin class must have static id, name, and renderingType properties\");\n    }\n    \n    // Add essential properties from static metadata to this instance\n    this.id = metadata.id;\n    this.name = metadata.name;\n    this.description = metadata.description || \"No description provided\";\n    this.renderingType = metadata.renderingType;\n    \n    // Store core reference\n    this.core = core;\n    \n    // Internal state\n    this.isLoaded = false;\n    this._eventHandlers = [];\n    this._animationHandlers = [];\n    \n    // Parameter tracking\n    this._visualParameters = [];\n    this._structuralParameters = [];\n    this._advancedParameters = [];\n  }\n  \n  /**\n   * Load and initialize the plugin - framework internal use\n   * @returns {Promise<boolean>} Whether loading was successful\n   */\n  async load() {\n    if (this.isLoaded) return true;\n    \n    try {\n      console.log(`Loading plugin: ${this.name} (${this.id})`);\n      \n      // Framework initialization steps\n      // Get the rendering environment at load time to ensure it's the correct one\n      this.renderEnv = this.core.getRenderingEnvironment();\n      \n      // Call the user-implemented start method\n      await this.start();\n      \n      this.isLoaded = true;\n      return true;\n    } catch (error) {\n      console.error(`Error loading plugin ${this.id}:`, error);\n      await this.unload();\n      return false;\n    }\n  }\n  \n  /**\n   * Start the plugin - main entry point for plugin developers\n   * Override this method to implement plugin-specific initialization\n   * @returns {Promise<void>}\n   */\n  async start() {\n    // To be implemented by subclasses\n    // This is where plugin developers should put their initialization code\n  }\n  \n  /**\n   * Unload and clean up the plugin\n   * @returns {Promise<boolean>} Whether unloading was successful\n   */\n  async unload() {\n    if (!this.isLoaded) return true;\n    \n    try {\n      console.log(`Unloading plugin: ${this.name} (${this.id})`);\n      \n      // Cancel all animations\n      this._cancelAllAnimations();\n      \n      // Remove all event handlers\n      this._removeAllEventHandlers();\n      \n      // Reset state\n      this.isLoaded = false;\n      this.renderEnv = null;\n      this._visualParameters = [];\n      this._structuralParameters = [];\n      this._advancedParameters = [];\n      \n      return true;\n    } catch (error) {\n      console.error(`Error unloading plugin ${this.id}:`, error);\n      return false;\n    }\n  }\n  \n  // ======== PARAMETER MANAGEMENT HELPER METHODS ========\n  \n  /**\n   * Add a slider parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {number} defaultValue - Default value\n   * @param {Object} options - Options like min, max, step\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addSlider(id, label, defaultValue, options = {}, group = 'visual') {\n    const param = {\n      id,\n      type: 'slider',\n      label,\n      default: defaultValue,\n      min: options.min !== undefined ? options.min : 0,\n      max: options.max !== undefined ? options.max : 100,\n      step: options.step !== undefined ? options.step : 1\n    };\n    \n    this._addParameter(param, group);\n    return this;\n  }\n  \n  /**\n   * Add a checkbox parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {boolean} defaultValue - Default value\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addCheckbox(id, label, defaultValue, group = 'visual') {\n    const param = {\n      id,\n      type: 'checkbox',\n      label,\n      default: defaultValue\n    };\n    \n    this._addParameter(param, group);\n    return this;\n  }\n  \n  /**\n   * Add a color picker parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {string} defaultValue - Default color value\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addColor(id, label, defaultValue, group = 'visual') {\n    const param = {\n      id,\n      type: 'color',\n      label,\n      default: defaultValue\n    };\n    \n    this._addParameter(param, group);\n    return this;\n  }\n\n  /**\n   * Add a color palette selector parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addColorPalette(id = 'colorPalette', label = 'Color Palette', group = 'visual') {\n    // Get palette information with both id and name\n    const paletteInfo = this.getPaletteInfo();\n    \n    // Get current palette name for default value\n    const currentPalette = this.getCurrentPaletteName();\n    \n    // Map palette info to dropdown options format\n    const options = paletteInfo.map(palette => ({\n      value: palette.id,\n      label: palette.name\n    }));\n    \n    // Add as a dropdown parameter\n    this.addDropdown(id, label, currentPalette, options, group);\n    \n    return this;\n  }\n  \n  /**\n   * Add a dropdown parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {string} defaultValue - Default selected value\n   * @param {Array} options - Array of options (strings or {value, label} objects)\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addDropdown(id, label, defaultValue, options, group = 'visual') {\n    const param = {\n      id,\n      type: 'dropdown',\n      label,\n      default: defaultValue,\n      options\n    };\n    \n    this._addParameter(param, group);\n    return this;\n  }\n  \n  /**\n   * Add a number input parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {number} defaultValue - Default value\n   * @param {Object} options - Options like min, max, step\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addNumber(id, label, defaultValue, options = {}, group = 'visual') {\n    const param = {\n      id,\n      type: 'number',\n      label,\n      default: defaultValue\n    };\n    \n    if (options.min !== undefined) param.min = options.min;\n    if (options.max !== undefined) param.max = options.max;\n    if (options.step !== undefined) param.step = options.step;\n    \n    this._addParameter(param, group);\n    return this;\n  }\n  \n  /**\n   * Add a text input parameter\n   * @param {string} id - Parameter ID\n   * @param {string} label - Display label\n   * @param {string} defaultValue - Default value\n   * @param {string} group - Parameter group ('visual', 'structural', 'advanced')\n   * @returns {BasePlugin} This plugin for chaining\n   */\n  addText(id, label, defaultValue, group = 'visual') {\n    const param = {\n      id,\n      type: 'text',\n      label,\n      default: defaultValue\n    };\n    \n    this._addParameter(param, group);\n    return this;\n  }\n  \n  /**\n   * Add a parameter to the appropriate group and register with core\n   * @param {Object} param - Parameter definition\n   * @param {string} group - Parameter group\n   * @private\n   */\n  _addParameter(param, group) {\n    // Store parameter locally for tracking\n    switch (group) {\n      case 'visual':\n        this._visualParameters.push(param);\n        break;\n      case 'structural':\n        this._structuralParameters.push(param);\n        break;\n      case 'advanced':\n        this._advancedParameters.push(param);\n        break;\n      default:\n        console.warn(`Unknown parameter group: ${group}, defaulting to visual`);\n        this._visualParameters.push(param);\n        group = 'visual';\n    }\n    \n    // Directly register the parameter with the core\n    const groupPrefix = group.charAt(0).toUpperCase() + group.slice(1);\n    const addMethodName = `addParameters${groupPrefix}`;\n    \n    if (this.core && typeof this.core[addMethodName] === 'function') {\n      this.core[addMethodName]([param]);\n    } else {\n      console.warn(`Cannot add parameter ${param.id} - no method available for group ${group}`);\n    }\n  }\n  \n  /**\n   * Remove a parameter\n   * @param {string} id - Parameter ID to remove\n   * @param {string} group - Optional parameter group\n   * @returns {boolean} Whether the parameter was found and removed\n   */\n  removeParameter(id, group = null) {\n    if (!this.core || typeof this.core.removeParameter !== 'function') {\n      console.warn('Core removeParameter method not available');\n      return false;\n    }\n    \n    // Use the core's removeParameter method\n    const result = this.core.removeParameter(id, group);\n    \n    if (result) {\n      // Update our internal tracking\n      const removeFromList = (list) => {\n        const index = list.findIndex(p => p.id === id);\n        if (index !== -1) {\n          list.splice(index, 1);\n          return true;\n        }\n        return false;\n      };\n      \n      if (group) {\n        // Remove from specific group\n        switch (group) {\n          case 'visual':\n            removeFromList(this._visualParameters);\n            break;\n          case 'structural':\n            removeFromList(this._structuralParameters);\n            break;\n          case 'advanced':\n            removeFromList(this._advancedParameters);\n            break;\n        }\n      } else {\n        // Remove from any group where it exists\n        removeFromList(this._visualParameters) || \n        removeFromList(this._structuralParameters) || \n        removeFromList(this._advancedParameters);\n      }\n    }\n    \n    return result;\n  }\n  \n  /**\n   * Empty all parameters from the core\n   * @param {string} group - Optional parameter group to empty ('visual', 'structural', 'advanced')\n   * @returns {boolean} Whether the operation was successful\n   */\n  emptyParameters(group = null) {\n    // Clear all tracked parameters\n    if (!group) {\n      this._visualParameters = [];\n      this._structuralParameters = [];\n      this._advancedParameters = [];\n    } else {\n      // Clear only the specified group\n      switch (group) {\n        case 'visual':\n          this._visualParameters = [];\n          break;\n        case 'structural':\n          this._structuralParameters = [];\n          break;\n        case 'advanced':\n          this._advancedParameters = [];\n          break;\n        default:\n          console.warn(`Unknown parameter group: ${group}`);\n          return false;\n      }\n    }\n    \n    // Call the core method if available\n    if (this.core && typeof this.core.emptyParameters === 'function') {\n      return this.core.emptyParameters(group);\n    } else {\n      console.warn('Core emptyParameters method not available');\n      return false;\n    }\n  }\n  \n  /**\n   * Set a parameter value\n   * @param {string} id - Parameter ID\n   * @param {any} value - New value\n   * @returns {boolean} Whether the parameter was found and updated\n   */\n  setParameter(id, value) {\n    if (this.core && typeof this.core.changeParameter === 'function') {\n      return this.core.changeParameter(id, value);\n    }\n    return false;\n  }\n  \n  /**\n   * Get a parameter value\n   * @param {string} id - Parameter ID\n   * @returns {any} Parameter value or undefined if not found\n   */\n  getParameter(id) {\n    if (this.core && typeof this.core.getAllParameters === 'function') {\n      const params = this.core.getAllParameters();\n      return params[id];\n    }\n    return undefined;\n  }\n  \n  /**\n   * Get all parameter values\n   * @returns {Object} All parameter values\n   */\n  getAllParameters() {\n    if (this.core && typeof this.core.getAllParameters === 'function') {\n      return this.core.getAllParameters();\n    }\n    return {};\n  }\n  \n  // ======== ACTION MANAGEMENT HELPER METHODS ========\n  \n  /**\n   * Add an action\n   * @param {string} id - Action ID\n   * @param {string} label - Display label\n   * @param {Function} callback - Function to execute\n   * @param {Object} options - Additional options\n   * @returns {boolean} Whether the action was added successfully\n   */\n  addAction(id, label, callback, options = {}) {\n    if (this.core && typeof this.core.addAction === 'function') {\n      return this.core.addAction(id, label, callback, options);\n    }\n    return false;\n  }\n  \n  /**\n   * Remove an action\n   * @param {string} id - Action ID\n   * @returns {boolean} Whether the action was found and removed\n   */\n  removeAction(id) {\n    if (this.core && typeof this.core.removeAction === 'function') {\n      return this.core.removeAction(id);\n    }\n    return false;\n  }\n  \n  /**\n   * Refreshes the visualization without changing any state\n   * @protected - Internal use only, but available to subclasses\n   */\n  refresh() {\n    // To be implemented by subclasses\n  }\n  \n  // ======== ANIMATION HELPER METHODS ========\n  \n  /**\n   * Request animation\n   * @param {Function} callback - Animation callback function that receives deltaTime\n   * @returns {Function|null} Animation handler (for cancellation)\n   */\n  requestAnimation(callback) {\n    if (!this.core || !this.core.animationManager || \n        typeof this.core.animationManager.requestAnimation !== 'function') {\n      console.warn(\"Animation manager not available\");\n      return null;\n    }\n    \n    // Create animation handler\n    const handler = this.core.animationManager.requestAnimation(callback);\n    \n    // Store handler for cleanup\n    if (handler) {\n      this._animationHandlers.push(handler);\n    }\n    \n    return handler;\n  }\n  \n  /**\n   * Cancel animation\n   * @param {Function} handler - Animation handler to cancel\n   * @returns {boolean} Whether the animation was found and cancelled\n   */\n  cancelAnimation(handler) {\n    if (!this.core || !this.core.animationManager || \n        typeof this.core.animationManager.cancelAnimation !== 'function') {\n      return false;\n    }\n    \n    // Cancel animation\n    this.core.animationManager.cancelAnimation(handler);\n    \n    // Remove from our handlers list\n    const index = this._animationHandlers.indexOf(handler);\n    if (index !== -1) {\n      this._animationHandlers.splice(index, 1);\n      return true;\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Cancel all animations\n   * @private\n   */\n  _cancelAllAnimations() {\n    if (!this.core || !this.core.animationManager || \n        typeof this.core.animationManager.cancelAnimation !== 'function') {\n      return;\n    }\n    \n    // Cancel all animations\n    this._animationHandlers.forEach(handler => {\n      this.core.animationManager.cancelAnimation(handler);\n    });\n    \n    // Clear handlers list\n    this._animationHandlers = [];\n  }\n  \n  // ======== EVENT MANAGEMENT METHODS ========\n  \n  /**\n   * Handle parameter changes\n   * @param {string} parameterId - Parameter ID\n   * @param {any} value - New value\n   * @param {string} group - Parameter group\n   */\n  onParameterChanged(parameterId, value, group) {\n    // Implementation will be provided by subclasses\n  }\n  \n  /**\n   * Handle user interaction events\n   * @param {string} type - Type of interaction (mousedown, mousemove, mouseup, etc.)\n   * @param {Object} data - Interaction data\n   */\n  handleInteraction(type, data) {\n    // Implementation will be provided by subclasses\n  }\n  \n  /**\n   * Clean up event handlers\n   * @private\n   */\n  _removeAllEventHandlers() {\n    this._eventHandlers.forEach(handler => {\n      if (handler.target && handler.type && handler.callback) {\n        if (typeof handler.target.off === 'function') {\n          handler.target.off(handler.type, handler.callback);\n        }\n      } else if (handler.type === 'parameterChanged') {\n        this.core?.removeParameterCallback(handler.callback);\n      } else if (handler.type === 'action') {\n        this.core?.removeActionCallback(handler.callback);\n      } else if (handler.type === 'paletteChanged' && this.core?.events) {\n        this.core.events.off('paletteChanged', handler.callback);\n      }\n    });\n    \n    this._eventHandlers = [];\n  }\n\n  /**\n   * Internal method to handle parameter changes from AppCore\n   * This is called by AppCore but not directly exposed to plugin developers\n   * @param {string} parameterId - Parameter ID\n   * @param {any} value - New parameter value\n   * @param {string} group - Parameter group\n   */\n  _handleParameterChanged(parameterId, value, group) {\n    try {\n      // Call the user-defined onParameterChanged method\n      if (typeof this.onParameterChanged === 'function') {\n        this.onParameterChanged(parameterId, value, group);\n      }\n      \n      // Refresh visualization after parameter handling\n      this.refresh();\n    } catch (error) {\n      console.error(`Error handling parameter change in plugin ${this.id}:`, error);\n    }\n  }\n  \n  /**\n   * Internal method to handle action execution\n   * This is called by AppCore when an action button is pressed\n   * @param {string} actionId - ID of the action\n   * @param {Array} args - Arguments for the action\n   * @returns {any} Result of the action\n   */\n  _handleActionExecution(actionId, ...args) {\n    try {\n      // Find the action in the core\n      const action = this.core._actions.get(actionId);\n      \n      if (action && typeof action.callback === 'function') {\n        // Execute the action callback\n        const result = action.callback(...args);\n        \n        // Refresh visualization after action execution\n        this.refresh();\n        \n        return result;\n      }\n    } catch (error) {\n      console.error(`Error executing action ${actionId} in plugin ${this.id}:`, error);\n      \n      // Propagate error to UI if available\n      if (this.core && this.core.uiManager) {\n        this.core.uiManager.showError(`Action failed: ${error.message}`);\n      }\n    }\n    \n    return false;\n  }\n\n  // ======== COLOR SCHEME METHODS ========\n  /**\n   * Get a structural color from the current palette\n   * @param {string} element - Structural element name ('grid', 'weak', 'strong', 'guide', 'highlight')\n   * @returns {string} Color value\n   */\n  getStructuralColor(element) {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return '#000000';\n    }\n    return this.core.colorSchemeManager.getStructuralColor(element);\n  }\n\n  /**\n   * Get a main color from the current palette by index\n   * @param {number} index - Main color index (0-based)\n   * @returns {string} Color value\n   */\n  getMainColor(index = 0) {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return '#000000';\n    }\n    return this.core.colorSchemeManager.getMainColor(index);\n  }\n\n  /**\n   * Get all main colors from the current palette\n   * @returns {Array<string>} Array of main colors\n   */\n  getMainColors() {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return [];\n    }\n    return this.core.colorSchemeManager.getMainColors();\n  }\n\n  /**\n   * Get a functional color from the current palette\n   * @param {string} purpose - Functional purpose ('positive', 'negative', 'neutral', 'selected', 'interactive')\n   * @returns {string} Color value\n   */\n  getFunctionalColor(purpose) {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return '#000000';\n    }\n    return this.core.colorSchemeManager.getFunctionalColor(purpose);\n  }\n\n  /**\n   * Register to be notified of palette changes\n   * @param {Function} callback - Function to call when palette changes\n   */\n  onPaletteChanged(callback) {\n    if (!this.core || !this.core.events) return;\n    \n    this.core.events.on('paletteChanged', callback);\n    this._eventHandlers.push({\n      type: 'paletteChanged',\n      callback\n    });\n  }\n\n  /**\n   * Get available palette names and information\n   * @returns {Array<Object>} Array of palette info objects with id and name\n   */\n  getPaletteInfo() {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return [];\n    }\n    return this.core.colorSchemeManager.getPaletteInfo();\n  }\n\n  /**\n   * Get the current palette name\n   * @returns {string} Current palette name\n   */\n  getCurrentPaletteName() {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return 'default';\n    }\n    return this.core.colorSchemeManager.getCurrentPaletteName();\n  }\n\n  /**\n   * Set the current palette\n   * @param {string} paletteName - Palette name\n   * @returns {boolean} Whether the change was successful\n   */\n  setCurrentPalette(paletteName) {\n    if (!this.core || !this.core.colorSchemeManager) {\n      return false;\n    }\n    return this.core.colorSchemeManager.setCurrentPalette(paletteName);\n  }\n}\n","// src/core/Plugin3D.js\n\nimport { BasePlugin } from './BasePlugin.js';\n\n/**\n * Specialized plugin class for 3D visualizations using THREE.js\n * Provides resource management, object creation, and scene control\n * with automatic cleanup and best practices enforcement\n */\nexport class Plugin3D extends BasePlugin {\n  /**\n   * Create a Plugin3D instance\n   * @param {AppCore} core - Reference to the application core\n   */\n  constructor(core) {\n    super(core);\n    \n    // Store rendering type\n    this.renderingType = '3d';\n    \n    // Resource tracking for automatic cleanup\n    this._meshes = new Set();\n    this._groups = new Set();\n    this._geometries = new Set();\n    this._materials = new Set();\n    this._textures = new Set();\n    this._lights = new Set();\n    \n    // Main mesh group for the visualization (what render modes are applied to)\n    this.mainMeshGroup = null;\n    \n    // Current render mode state\n    this._currentRenderMode = null;\n    this._currentRenderOptions = null;\n  }\n  \n  // ======== RESOURCE REGISTRATION ========\n  \n  /**\n   * Register a mesh for automatic cleanup\n   * @param {THREE.Mesh} mesh - Mesh to register\n   * @returns {THREE.Mesh} The registered mesh\n   */\n  addMesh(mesh) {\n    if (!mesh) return null;\n    \n    this._meshes.add(mesh);\n    this.addToScene(mesh);\n    return mesh;\n  }\n  \n  /**\n   * Register a THREE.Group for automatic cleanup\n   * @param {THREE.Group} group - Group to register\n   * @returns {THREE.Group} The registered group\n   */\n  addGroup(group) {\n    if (!group) return null;\n    \n    this._groups.add(group);\n    return group;\n  }\n  \n  /**\n   * Register geometry for automatic cleanup\n   * @param {THREE.BufferGeometry} geometry - Geometry to register\n   * @returns {THREE.BufferGeometry} The registered geometry\n   */\n  addGeometry(geometry) {\n    if (!geometry) return null;\n    \n    this._geometries.add(geometry);\n    return geometry;\n  }\n  \n  /**\n   * Register material for automatic cleanup\n   * @param {THREE.Material} material - Material to register\n   * @returns {THREE.Material} The registered material\n   */\n  addMaterial(material) {\n    if (!material) return null;\n    \n    this._materials.add(material);\n    return material;\n  }\n  \n  /**\n   * Register texture for automatic cleanup\n   * @param {THREE.Texture} texture - Texture to register\n   * @returns {THREE.Texture} The registered texture\n   */\n  addTexture(texture) {\n    if (!texture) return null;\n    \n    this._textures.add(texture);\n    return texture;\n  }\n  \n  /**\n   * Register light for automatic cleanup\n   * @param {THREE.Light} light - Light to register\n   * @returns {THREE.Light} The registered light\n   */\n  addLight(light) {\n    if (!light) return null;\n    \n    this._lights.add(light);\n    this.addToScene(light);\n    return light;\n  }\n  \n  // ======== OBJECT CREATION ========\n  \n  /**\n   * Create a box mesh with automatic registration\n   * @param {Object} options - Box geometry options\n   * @param {number} options.width - Width of the box\n   * @param {number} options.height - Height of the box\n   * @param {number} options.depth - Depth of the box\n   * @param {number} options.widthSegments - Width segments (default: 1)\n   * @param {number} options.heightSegments - Height segments (default: 1)\n   * @param {number} options.depthSegments - Depth segments (default: 1)\n   * @param {THREE.Material} material - Material for the mesh\n   * @returns {THREE.Mesh} Created and registered box mesh\n   */\n  createBox(options, material) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const geometryOptions = {\n      width: options.width || 1,\n      height: options.height || 1,\n      depth: options.depth || 1,\n      widthSegments: options.widthSegments || 1,\n      heightSegments: options.heightSegments || 1,\n      depthSegments: options.depthSegments || 1\n    };\n    \n    // Create geometry\n    const geometry = new THREE.BoxGeometry(\n      geometryOptions.width,\n      geometryOptions.height,\n      geometryOptions.depth,\n      geometryOptions.widthSegments,\n      geometryOptions.heightSegments,\n      geometryOptions.depthSegments\n    );\n    \n    // Register geometry\n    this.addGeometry(geometry);\n    \n    // Create and register mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    return this.addMesh(mesh);\n  }\n  \n  /**\n   * Create a sphere mesh with automatic registration\n   * @param {Object} options - Sphere geometry options\n   * @param {number} options.radius - Sphere radius\n   * @param {number} options.widthSegments - Width segments (default: 32)\n   * @param {number} options.heightSegments - Height segments (default: 16)\n   * @param {THREE.Material} material - Material for the mesh\n   * @returns {THREE.Mesh} Created and registered sphere mesh\n   */\n  createSphere(options, material) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const geometryOptions = {\n      radius: options.radius || 1,\n      widthSegments: options.widthSegments || 32,\n      heightSegments: options.heightSegments || 16\n    };\n    \n    // Create geometry\n    const geometry = new THREE.SphereGeometry(\n      geometryOptions.radius,\n      geometryOptions.widthSegments,\n      geometryOptions.heightSegments\n    );\n    \n    // Register geometry\n    this.addGeometry(geometry);\n    \n    // Create and register mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    return this.addMesh(mesh);\n  }\n  \n  /**\n   * Create a cylinder mesh with automatic registration\n   * @param {Object} options - Cylinder geometry options\n   * @param {number} options.radiusTop - Radius of top (default: 1)\n   * @param {number} options.radiusBottom - Radius of bottom (default: 1)\n   * @param {number} options.height - Height of cylinder (default: 1)\n   * @param {number} options.radialSegments - Radial segments (default: 32)\n   * @param {number} options.heightSegments - Height segments (default: 1)\n   * @param {boolean} options.openEnded - Whether ends are open (default: false)\n   * @param {THREE.Material} material - Material for the mesh\n   * @returns {THREE.Mesh} Created and registered cylinder mesh\n   */\n  createCylinder(options, material) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const geometryOptions = {\n      radiusTop: options.radiusTop !== undefined ? options.radiusTop : 1,\n      radiusBottom: options.radiusBottom !== undefined ? options.radiusBottom : 1,\n      height: options.height || 1,\n      radialSegments: options.radialSegments || 32,\n      heightSegments: options.heightSegments || 1,\n      openEnded: options.openEnded || false\n    };\n    \n    // Create geometry\n    const geometry = new THREE.CylinderGeometry(\n      geometryOptions.radiusTop,\n      geometryOptions.radiusBottom,\n      geometryOptions.height,\n      geometryOptions.radialSegments,\n      geometryOptions.heightSegments,\n      geometryOptions.openEnded\n    );\n    \n    // Register geometry\n    this.addGeometry(geometry);\n    \n    // Create and register mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    return this.addMesh(mesh);\n  }\n  \n  /**\n   * Create a plane mesh with automatic registration\n   * @param {Object} options - Plane geometry options\n   * @param {number} options.width - Width of plane (default: 1)\n   * @param {number} options.height - Height of plane (default: 1)\n   * @param {number} options.widthSegments - Width segments (default: 1)\n   * @param {number} options.heightSegments - Height segments (default: 1)\n   * @param {THREE.Material} material - Material for the mesh\n   * @returns {THREE.Mesh} Created and registered plane mesh\n   */\n  createPlane(options, material) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const geometryOptions = {\n      width: options.width || 1,\n      height: options.height || 1,\n      widthSegments: options.widthSegments || 1,\n      heightSegments: options.heightSegments || 1\n    };\n    \n    // Create geometry\n    const geometry = new THREE.PlaneGeometry(\n      geometryOptions.width,\n      geometryOptions.height,\n      geometryOptions.widthSegments,\n      geometryOptions.heightSegments\n    );\n    \n    // Register geometry\n    this.addGeometry(geometry);\n    \n    // Create and register mesh\n    const mesh = new THREE.Mesh(geometry, material);\n    return this.addMesh(mesh);\n  }\n  \n  /**\n   * Create line segments for rendering edges or wireframes\n   * @param {Array<THREE.Vector3>} vertices - Array of vertices\n   * @param {THREE.Material} material - Line material\n   * @returns {THREE.LineSegments} Created and registered line segments\n   */\n  createLineSegments(vertices, material) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Create geometry from vertices\n    const geometry = new THREE.BufferGeometry().setFromPoints(vertices);\n    \n    // Register geometry\n    this.addGeometry(geometry);\n    \n    // Create and register line segments\n    const lineSegments = new THREE.LineSegments(geometry, material);\n    return this.addMesh(lineSegments);\n  }\n  \n  // ======== LIGHTING ========\n  \n  /**\n   * Create and register an ambient light\n   * @param {Object} options - Light options\n   * @param {number|string} options.color - Light color (default: 0xffffff)\n   * @param {number} options.intensity - Light intensity (default: 1)\n   * @returns {THREE.AmbientLight} Created and registered ambient light\n   */\n  createAmbientLight(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const lightOptions = {\n      color: options.color !== undefined ? options.color : 0xffffff,\n      intensity: options.intensity !== undefined ? options.intensity : 1\n    };\n    \n    // Create and register light\n    const light = new THREE.AmbientLight(\n      lightOptions.color,\n      lightOptions.intensity\n    );\n    \n    return this.addLight(light);\n  }\n  \n  /**\n   * Create and register a directional light\n   * @param {Object} options - Light options\n   * @param {number|string} options.color - Light color (default: 0xffffff)\n   * @param {number} options.intensity - Light intensity (default: 1)\n   * @param {Array<number>} options.position - Light position [x, y, z] (default: [1, 1, 1])\n   * @param {boolean} options.castShadow - Whether light casts shadows (default: false)\n   * @returns {THREE.DirectionalLight} Created and registered directional light\n   */\n  createDirectionalLight(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const lightOptions = {\n      color: options.color !== undefined ? options.color : 0xffffff,\n      intensity: options.intensity !== undefined ? options.intensity : 1,\n      position: options.position || [1, 1, 1],\n      castShadow: options.castShadow || false\n    };\n    \n    // Create light\n    const light = new THREE.DirectionalLight(\n      lightOptions.color,\n      lightOptions.intensity\n    );\n    \n    // Set position\n    light.position.set(...lightOptions.position);\n    \n    // Set shadow properties\n    light.castShadow = lightOptions.castShadow;\n    \n    // Register and return\n    return this.addLight(light);\n  }\n  \n  /**\n   * Create and register a point light\n   * @param {Object} options - Light options\n   * @param {number|string} options.color - Light color (default: 0xffffff)\n   * @param {number} options.intensity - Light intensity (default: 1)\n   * @param {number} options.distance - Light distance (default: 0)\n   * @param {number} options.decay - Light decay (default: 2)\n   * @param {Array<number>} options.position - Light position [x, y, z] (default: [0, 0, 0])\n   * @param {boolean} options.castShadow - Whether light casts shadows (default: false)\n   * @returns {THREE.PointLight} Created and registered point light\n   */\n  createPointLight(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const lightOptions = {\n      color: options.color !== undefined ? options.color : 0xffffff,\n      intensity: options.intensity !== undefined ? options.intensity : 1,\n      distance: options.distance !== undefined ? options.distance : 0,\n      decay: options.decay !== undefined ? options.decay : 2,\n      position: options.position || [0, 0, 0],\n      castShadow: options.castShadow || false\n    };\n    \n    // Create light\n    const light = new THREE.PointLight(\n      lightOptions.color,\n      lightOptions.intensity,\n      lightOptions.distance,\n      lightOptions.decay\n    );\n    \n    // Set position\n    light.position.set(...lightOptions.position);\n    \n    // Set shadow properties\n    light.castShadow = lightOptions.castShadow;\n    \n    // Register and return\n    return this.addLight(light);\n  }\n  \n  /**\n   * Create and register a spot light\n   * @param {Object} options - Light options\n   * @param {number|string} options.color - Light color (default: 0xffffff)\n   * @param {number} options.intensity - Light intensity (default: 1)\n   * @param {number} options.distance - Light distance (default: 0)\n   * @param {number} options.angle - Light angle in radians (default: Math.PI/3)\n   * @param {number} options.penumbra - Light penumbra (default: 0)\n   * @param {number} options.decay - Light decay (default: 2)\n   * @param {Array<number>} options.position - Light position [x, y, z] (default: [0, 1, 0])\n   * @param {boolean} options.castShadow - Whether light casts shadows (default: false)\n   * @returns {THREE.SpotLight} Created and registered spot light\n   */\n  createSpotLight(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Default options\n    const lightOptions = {\n      color: options.color !== undefined ? options.color : 0xffffff,\n      intensity: options.intensity !== undefined ? options.intensity : 1,\n      distance: options.distance !== undefined ? options.distance : 0,\n      angle: options.angle !== undefined ? options.angle : Math.PI/3,\n      penumbra: options.penumbra !== undefined ? options.penumbra : 0,\n      decay: options.decay !== undefined ? options.decay : 2,\n      position: options.position || [0, 1, 0],\n      castShadow: options.castShadow || false\n    };\n    \n    // Create light\n    const light = new THREE.SpotLight(\n      lightOptions.color,\n      lightOptions.intensity,\n      lightOptions.distance,\n      lightOptions.angle,\n      lightOptions.penumbra,\n      lightOptions.decay\n    );\n    \n    // Set position\n    light.position.set(...lightOptions.position);\n    \n    // Set shadow properties\n    light.castShadow = lightOptions.castShadow;\n    \n    // Register and return\n    return this.addLight(light);\n  }\n  \n  // ======== MATERIAL CREATION ========\n  \n  /**\n   * Create and register a standard material\n   * @param {Object} options - Material options\n   * @param {number|string} options.color - Color (default: 0xffffff)\n   * @param {number} options.roughness - Roughness (default: 0.5)\n   * @param {number} options.metalness - Metalness (default: 0.5)\n   * @param {number} options.opacity - Opacity (default: 1.0)\n   * @param {boolean} options.transparent - Whether material is transparent (default: false)\n   * @param {THREE.Texture} options.map - Color map texture\n   * @returns {THREE.MeshStandardMaterial} Created and registered material\n   */\n  createStandardMaterial(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Create material\n    const material = new THREE.MeshStandardMaterial({\n      color: options.color !== undefined ? options.color : 0xffffff,\n      roughness: options.roughness !== undefined ? options.roughness : 0.5,\n      metalness: options.metalness !== undefined ? options.metalness : 0.5,\n      opacity: options.opacity !== undefined ? options.opacity : 1.0,\n      transparent: options.opacity !== undefined ? options.opacity < 1.0 : options.transparent || false,\n      map: options.map || null,\n      side: options.side || THREE.DoubleSide\n    });\n    \n    // Register the material\n    return this.addMaterial(material);\n  }\n  \n  /**\n   * Create and register a basic material\n   * @param {Object} options - Material options\n   * @param {number|string} options.color - Color (default: 0xffffff)\n   * @param {number} options.opacity - Opacity (default: 1.0)\n   * @param {boolean} options.transparent - Whether material is transparent (default: false)\n   * @param {boolean} options.wireframe - Whether to render as wireframe (default: false)\n   * @param {THREE.Texture} options.map - Color map texture\n   * @returns {THREE.MeshBasicMaterial} Created and registered material\n   */\n  createBasicMaterial(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Create material\n    const material = new THREE.MeshBasicMaterial({\n      color: options.color !== undefined ? options.color : 0xffffff,\n      opacity: options.opacity !== undefined ? options.opacity : 1.0,\n      transparent: options.opacity !== undefined ? options.opacity < 1.0 : options.transparent || false,\n      wireframe: options.wireframe || false,\n      map: options.map || null,\n      side: options.side || THREE.DoubleSide\n    });\n    \n    // Register the material\n    return this.addMaterial(material);\n  }\n  \n  /**\n   * Create and register a line material for edges\n   * @param {Object} options - Material options\n   * @param {number|string} options.color - Color (default: 0x000000)\n   * @param {number} options.linewidth - Line width (default: 1)\n   * @param {number} options.opacity - Opacity (default: 1.0)\n   * @param {boolean} options.transparent - Whether material is transparent (default: false)\n   * @returns {THREE.LineBasicMaterial} Created and registered material\n   */\n  createLineMaterial(options = {}) {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Create material\n    const material = new THREE.LineBasicMaterial({\n      color: options.color !== undefined ? options.color : 0x000000,\n      linewidth: options.linewidth !== undefined ? options.linewidth : 1,\n      opacity: options.opacity !== undefined ? options.opacity : 1.0,\n      transparent: options.opacity !== undefined ? options.opacity < 1.0 : options.transparent || false\n    });\n    \n    // Register the material\n    return this.addMaterial(material);\n  }\n  \n  // ======== SCENE MANAGEMENT ========\n  \n  /**\n   * Add an object to the scene\n   * @param {THREE.Object3D} object - Object to add\n   * @returns {THREE.Object3D} The added object\n   */\n  addToScene(object) {\n    if (!object) return null;\n    if (!this.renderEnv || !this.renderEnv.scene) {\n      console.error(\"Scene not available in rendering environment\");\n      return object;\n    }\n    \n    this.renderEnv.scene.add(object);\n    return object;\n  }\n  \n  /**\n   * Remove an object from the scene\n   * @param {THREE.Object3D} object - Object to remove\n   * @returns {boolean} Whether removal was successful\n   */\n  removeFromScene(object) {\n    if (!object) return false;\n    if (!this.renderEnv || !this.renderEnv.scene) {\n      console.error(\"Scene not available in rendering environment\");\n      return false;\n    }\n    \n    this.renderEnv.scene.remove(object);\n    return true;\n  }\n  \n  /**\n   * Set the main mesh group for the visualization\n   * This is the group that render modes are applied to\n   * Automatically removes any previous main mesh group\n   * @param {THREE.Group|THREE.Mesh} meshGroup - Mesh group to set as main\n   * @returns {THREE.Group|THREE.Mesh} The set mesh group\n   */\n  setMainMesh(meshGroup) {\n    if (!meshGroup) return null;\n    \n    // Remove existing main mesh group if any\n    if (this.mainMeshGroup) {\n      this.removeFromScene(this.mainMeshGroup);\n    }\n    \n    // Set new main mesh group\n    this.mainMeshGroup = meshGroup;\n    \n    // Add to scene\n    this.addToScene(this.mainMeshGroup);\n    \n    // Reapply render mode if one was previously set\n    if (this._currentRenderMode) {\n      this.applyRenderMode(this._currentRenderMode, this._currentRenderOptions);\n    }\n    \n    return this.mainMeshGroup;\n  }\n  \n  /**\n   * Create an empty group and register it\n   * @returns {THREE.Group} Created and registered group\n   */\n  createGroup() {\n    if (!this.renderEnv || !this.renderEnv.THREE) {\n      console.error(\"THREE.js not available in rendering environment\");\n      return null;\n    }\n    \n    const THREE = this.renderEnv.THREE;\n    \n    // Create group\n    const group = new THREE.Group();\n    \n    // Register group\n    return this.addGroup(group);\n  }\n  \n  // ======== CAMERA CONTROL ========\n  \n  /**\n   * Set the camera position\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} z - Z coordinate\n   * @returns {boolean} Whether camera position was set\n   */\n  setCameraPosition(x, y, z) {\n    if (!this.renderEnv || !this.renderEnv.camera) {\n      console.error(\"Camera not available in rendering environment\");\n      return false;\n    }\n    \n    this.renderEnv.camera.position.set(x, y, z);\n    return true;\n  }\n  \n  /**\n   * Look at a specific point with the camera\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} z - Z coordinate\n   * @returns {boolean} Whether camera look-at was set\n   */\n  lookAt(x, y, z) {\n    if (!this.renderEnv || !this.renderEnv.camera) {\n      console.error(\"Camera not available in rendering environment\");\n      return false;\n    }\n    \n    this.renderEnv.camera.lookAt(x, y, z);\n    return true;\n  }\n  \n  /**\n   * Reset the camera to its initial position\n   * @returns {boolean} Whether camera was reset\n   */\n  resetCamera() {\n    if (!this.renderEnv || !this.renderEnv.resetCamera) {\n      console.error(\"Reset camera function not available in rendering environment\");\n      return false;\n    }\n    \n    this.renderEnv.resetCamera();\n    return true;\n  }\n  \n  // ======== RENDER MODE INTEGRATION ========\n  \n  /**\n   * Apply a render mode to the main mesh group\n   * @param {string} mode - Render mode name\n   * @param {Object} options - Render mode options\n   * @param {number} options.opacity - Opacity value\n   * @param {Array<string>} options.colorPalette - Color palette\n   * @returns {boolean} Whether render mode was applied\n   */\n  applyRenderMode(mode, options = {}) {\n    if (!this.core || !this.core.renderModeManager) {\n      console.error(\"Render mode manager not available\");\n      return false;\n    }\n    \n    if (!this.mainMeshGroup) {\n      console.warn(\"No main mesh group available to apply render mode\");\n      return false;\n    }\n    \n    // Store current render mode and options for reapplication\n    this._currentRenderMode = mode;\n    this._currentRenderOptions = options;\n    \n    // Process color palette if provided as string\n    if (typeof options.colorPalette === 'string' && this.core.colorSchemeManager) {\n      options.colorPalette = this.core.colorSchemeManager.getPalette(options.colorPalette);\n    }\n    \n    // Apply render mode\n    return this.core.renderModeManager.applyRenderMode(\n      this.renderEnv.scene,\n      this.mainMeshGroup,\n      mode,\n      options\n    );\n  }\n  \n  /**\n   * Update render mode properties\n   * @param {Object} properties - Properties to update\n   * @param {number} properties.opacity - New opacity value\n   * @param {Array<string>} properties.colorPalette - New color palette\n   * @returns {boolean} Whether properties were updated\n   */\n  updateRenderProperties(properties) {\n    if (!this.core || !this.core.renderModeManager) {\n      console.error(\"Render mode manager not available\");\n      return false;\n    }\n    \n    if (!this.mainMeshGroup) {\n      console.warn(\"No main mesh group available to update render properties\");\n      return false;\n    }\n    \n    // Process color palette if provided as string\n    if (typeof properties.colorPalette === 'string' && this.core.colorSchemeManager) {\n      properties.colorPalette = this.core.colorSchemeManager.getPalette(properties.colorPalette);\n    }\n    \n    // Update render properties\n    this.core.renderModeManager.updateProperties(properties, this.mainMeshGroup);\n    \n    // Update stored options\n    if (this._currentRenderOptions) {\n      if (properties.opacity !== undefined) {\n        this._currentRenderOptions.opacity = properties.opacity;\n      }\n      if (properties.colorPalette !== undefined) {\n        this._currentRenderOptions.colorPalette = properties.colorPalette;\n      }\n    }\n    \n    return true;\n  }\n  \n  // ======== RENDER CONTROL ========\n  \n  /**\n   * Trigger a render update\n   * This is useful for manual updates when automatic rendering is not active\n   * @returns {boolean} Whether render was triggered\n   */\n  render() {\n    if (!this.renderEnv || !this.renderEnv.renderer) {\n      return false;\n    }\n    \n    // Use the environment's render method if available\n    if (typeof this.renderEnv.render === 'function') {\n      this.renderEnv.render(this.core.getAllParameters());\n      return true;\n    }\n    \n    // Fall back to direct rendering\n    if (this.renderEnv.renderer && this.renderEnv.scene && this.renderEnv.camera) {\n      this.renderEnv.renderer.render(this.renderEnv.scene, this.renderEnv.camera);\n      return true;\n    }\n    \n    return false;\n  }\n  \n  /**\n   * Refresh the visualization (alias for render)\n   */\n  refresh() {\n    this.render();\n  }\n  \n  // ======== CLEANUP ========\n  \n  /**\n   * Unload the plugin and clean up all resources\n   * @returns {Promise<boolean>} Whether unloading was successful\n   */\n  async unload() {\n    try {\n      // Cleanup mesh group\n      if (this.mainMeshGroup) {\n        this.removeFromScene(this.mainMeshGroup);\n        this.mainMeshGroup = null;\n      }\n      \n      // Clean up meshes\n      this._meshes.forEach(mesh => {\n        if (mesh) {\n          this.removeFromScene(mesh);\n        }\n      });\n      \n      // Clean up lights\n      this._lights.forEach(light => {\n        if (light) {\n          this.removeFromScene(light);\n        }\n      });\n      \n      // Clean up materials\n      this._materials.forEach(material => {\n        if (material && typeof material.dispose === 'function') {\n          material.dispose();\n        }\n      });\n      \n      // Clean up geometries\n      this._geometries.forEach(geometry => {\n        if (geometry && typeof geometry.dispose === 'function') {\n          geometry.dispose();\n        }\n      });\n      \n      // Clean up textures\n      this._textures.forEach(texture => {\n        if (texture && typeof texture.dispose === 'function') {\n          texture.dispose();\n        }\n      });\n      \n      // Clear resource tracking sets\n      this._meshes.clear();\n      this._groups.clear();\n      this._geometries.clear();\n      this._materials.clear();\n      this._textures.clear();\n      this._lights.clear();\n      \n      // Reset render mode state\n      this._currentRenderMode = null;\n      this._currentRenderOptions = null;\n      \n      // Let parent class handle remaining cleanup\n      return await super.unload();\n    } catch (error) {\n      console.error(`Error unloading plugin ${this.id}:`, error);\n      return false;\n    }\n  }\n}\n","// plugins/polytope-viewer/index.js\nimport { Plugin3D } from '../../core/Plugin3D.js';\nimport PolytopeFamily from './PolytopeFamily.js';\n\nexport default class PolytopeVisualization extends Plugin3D {\n  // Required static properties\n  static id = 'polytope-visualization';\n  static name = 'Polytope Visualization';\n  static description = 'Visualize various 3D polytope families';\n  static renderingType = '3d';\n  \n  constructor(core) {\n    super(core);\n    \n    // State for polytope families\n    this.families = [];\n    this.currentFamily = null;\n  }\n  \n  async start() {\n    // Add visual parameters\n    this.addCheckbox('showEdges', 'Show Edges', true);\n    this.addColorPalette(); // Use the plugin's color palette helper\n    this.addDropdown('renderMode', 'Render Mode', 'standard', \n                    ['standard', 'metallic', 'glass', 'toon'], 'visual');\n    this.addSlider('opacity', 'Opacity', 0.85, { min: 0.1, max: 1.0, step: 0.05 }, 'visual');\n    \n    // Discover available polytope families\n    await this.discoverFamilies();\n    \n    // Set initial parameters (including structural params for family selection)\n    this.setParameters();\n\n    // Create the polytope and update visualization\n    this.createPolytope();\n    this.updateVisualization();\n  }\n  \n  async discoverFamilies() {\n    try {\n      // Fetch the manifest file that lists all polytope families\n      const response = await fetch('/math-visualizer/plugins/polytope-viewer/families/manifest.json');\n      if (!response.ok) {\n        throw new Error(`Failed to load polytope families manifest: ${response.statusText}`);\n      }\n      \n      const manifest = await response.json();\n      this.families = [];\n      \n      // Import each family module and create instances\n      for (const entry of manifest) {\n        try {\n          // Dynamically import the family module\n          const module = await import(`./families/${entry.file}`);\n          const FamilyClass = module.default;\n          \n          // Create and store the family instance\n          const family = new FamilyClass(this, entry.name);\n          this.families.push({\n            id: entry.id,\n            name: entry.name,\n            instance: family\n          });\n          \n          console.log(`Loaded polytope family: ${entry.name}`);\n        } catch (error) {\n          console.error(`Error loading polytope family ${entry.name}:`, error);\n        }\n      }\n      \n      // Set the default family if any were loaded\n      if (this.families.length > 0) {\n        this.currentFamily = this.families[0].instance;\n      }\n      \n    } catch (error) {\n      console.error(\"Failed to discover polytope families:\", error);\n      \n      // Show error in UI\n      if (this.core && this.core.uiManager) {\n        this.core.uiManager.showError(`Failed to load polytope families: ${error.message}`);\n      }\n    }\n  }\n  \n  setParameters() {\n    // Clear any existing structural parameters\n    this.emptyParameters('structural');\n    \n    // Add the family type parameter if we have families\n    if (this.families.length > 0) {\n      const familyOptions = this.families.map(family => ({\n        value: family.id,\n        label: family.name\n      }));\n      \n      // Add the family selection dropdown\n      this.addDropdown(\n        'familyType',\n        'Polytope Family',\n        this.families.find(f => f.instance === this.currentFamily)?.id || this.families[0].id,\n        familyOptions,\n        'structural'\n      );\n      \n      // Add parameters specific to the current family\n      if (this.currentFamily) {\n        this.currentFamily.addFamilyParameters();\n      }\n    }\n  }\n  \n  createPolytope() {\n    if (!this.currentFamily) return false;\n    \n    // Call the family's createPolytope method to generate the geometry\n    return this.currentFamily.createPolytope();\n  }\n  \n  updateVisualization() {\n    if (!this.currentFamily) return;\n\n    // Create new mesh from the current family\n    const newMeshGroup = this.currentFamily.createMesh();\n    \n    // Register the mesh group with Plugin3D's resource tracking\n    // This will also add it to the scene\n    this.setMainMesh(newMeshGroup);\n    \n    // Apply render mode using Plugin3D's helper method\n    this.applyRenderMode(\n      this.getParameter('renderMode') || 'standard',\n      {\n        opacity: this.getParameter('opacity') || 0.85,\n        colorPalette: this.getParameter('colorPalette') || 'default'\n      }\n    );\n  }\n  \n  onParameterChanged(parameterId, value, group) {\n    if (parameterId === 'familyType') {\n      // Find the selected family\n      const selectedFamily = this.families.find(f => f.id === value);\n      if (selectedFamily) {\n        // Switch to the new family\n        this.currentFamily = selectedFamily.instance;\n        \n        // Reset parameters for the new family\n        this.setParameters();\n        \n        // Create and display the new polytope\n        this.createPolytope();\n        this.updateVisualization();\n      }\n    } \n    else if (group === 'structural') {\n      // Family-specific parameter changed, recreate the polytope\n      this.createPolytope();\n      this.updateVisualization();\n    }\n    else if (parameterId === 'showEdges') {\n      // Update visualization when edge visibility changes\n      this.updateVisualization();\n    }\n    else if (parameterId === 'opacity' || parameterId === 'colorPalette') {\n      // Update render properties for these visual parameters\n      this.updateRenderProperties({\n        opacity: this.getParameter('opacity'),\n        colorPalette: this.getParameter('colorPalette')\n      });\n    }\n    else if (parameterId === 'renderMode') {\n      // Apply new render mode\n      this.applyRenderMode(value, {\n        opacity: this.getParameter('opacity'),\n        colorPalette: this.getParameter('colorPalette')\n      });\n    }\n  }\n  \n  // The unload method can be greatly simplified as Plugin3D handles cleanup\n  async unload() {\n    // Clear families\n    this.families = [];\n    this.currentFamily = null;\n    \n    // Let Plugin3D handle mesh cleanup and other resources\n    await super.unload();\n  }\n}\n","var map = {\n\t\"./ArchimedeanSolids\": [\n\t\t8735,\n\t\t9,\n\t\t735\n\t],\n\t\"./ArchimedeanSolids.js\": [\n\t\t8735,\n\t\t9,\n\t\t735\n\t],\n\t\"./Associahedron\": [\n\t\t387,\n\t\t9,\n\t\t387\n\t],\n\t\"./Associahedron.js\": [\n\t\t387,\n\t\t9,\n\t\t387\n\t],\n\t\"./Cyclohedron\": [\n\t\t934,\n\t\t9,\n\t\t934\n\t],\n\t\"./Cyclohedron.js\": [\n\t\t934,\n\t\t9,\n\t\t934\n\t],\n\t\"./OrbitPolytope\": [\n\t\t7550,\n\t\t9,\n\t\t550\n\t],\n\t\"./OrbitPolytope.js\": [\n\t\t7550,\n\t\t9,\n\t\t550\n\t],\n\t\"./Permutahedron\": [\n\t\t6284,\n\t\t9,\n\t\t284\n\t],\n\t\"./Permutahedron.js\": [\n\t\t6284,\n\t\t9,\n\t\t284\n\t],\n\t\"./PlatonicSolids\": [\n\t\t2060,\n\t\t9,\n\t\t60\n\t],\n\t\"./PlatonicSolids.js\": [\n\t\t2060,\n\t\t9,\n\t\t60\n\t],\n\t\"./RootPolytope\": [\n\t\t9796,\n\t\t9,\n\t\t796\n\t],\n\t\"./RootPolytope.js\": [\n\t\t9796,\n\t\t9,\n\t\t796\n\t],\n\t\"./Stellahedron\": [\n\t\t7629,\n\t\t9,\n\t\t629\n\t],\n\t\"./Stellahedron.js\": [\n\t\t7629,\n\t\t9,\n\t\t629\n\t],\n\t\"./data/archimedean_solids\": [\n\t\t9266,\n\t\t3,\n\t\t266\n\t],\n\t\"./data/archimedean_solids.json\": [\n\t\t9266,\n\t\t3,\n\t\t266\n\t],\n\t\"./manifest\": [\n\t\t2414,\n\t\t3,\n\t\t414\n\t],\n\t\"./manifest.json\": [\n\t\t2414,\n\t\t3,\n\t\t414\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[2]).then(() => {\n\t\treturn __webpack_require__.t(id, ids[1] | 16)\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 5110;\nmodule.exports = webpackAsyncContext;","/**\n * Base class for polytope families using quickhull3d by Mauricio Poppe\n * Provides standard implementations and required interface\n */\n\nimport { meshFromFaces } from './meshFromFaces.js';\n// Import QuickHull if available globally, otherwise import from utils\nlet QuickHullFunc;\ntry {\n  // Check if it's already available globally (from libraryInit.js)\n  QuickHullFunc = window.QuickHull;\n  if (!QuickHullFunc) {\n    // Try to import from a relative path\n    import('../../utils/QuickHull.js').then(module => {\n      QuickHullFunc = module.default;\n    }).catch(error => {\n      console.error(\"Error importing QuickHull:\", error);\n      // Fallback implementation\n      QuickHullFunc = (points, options) => {\n        console.warn(\"Using fallback QuickHull (very basic)\");\n        return [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]];\n      };\n    });\n  }\n} catch (e) {\n  console.error(\"Error accessing QuickHull:\", e);\n  // Fallback implementation\n  QuickHullFunc = (points, options) => {\n    console.warn(\"Using fallback QuickHull (very basic)\");\n    return [[0, 1, 2], [0, 2, 3], [0, 3, 1], [1, 3, 2]];\n  };\n}\n\nclass PolytopeFamily {\n  /**\n   * Create a new PolytopeFamily instance\n   * @param {Plugin} plugin - The plugin instance\n   * @param {string} name - Name of the polytope family\n   */\n  constructor(plugin, name = \"Unnamed Polytope\") {\n    this.plugin = plugin;\n    this.name = name;\n    this.vertices = [];\n    this.faces = [];\n    this.edges = [];\n    this.center = [0, 0, 0];\n  }\n  \n  /**\n   * Calculate the center of the polytope from its vertices\n   * @returns {number[]} The [x,y,z] coordinates of the center\n   */\n  calculateCenter() {\n    if (this.vertices.length === 0) {\n      return [0, 0, 0];\n    }\n    \n    // Sum all vertex coordinates\n    const sum = this.vertices.reduce(\n      (acc, vertex) => [\n        acc[0] + vertex[0],\n        acc[1] + vertex[1],\n        acc[2] + vertex[2]\n      ],\n      [0, 0, 0]\n    );\n    \n    // Divide by number of vertices to get center\n    const count = this.vertices.length;\n    return [\n      sum[0] / count,\n      sum[1] / count,\n      sum[2] / count\n    ];\n  }\n  \n  /**\n   * Calculate the vertices of the polytope based on current parameters\n   * @abstract\n   * @returns {number[][]} Array of [x,y,z] vertex coordinates\n   */\n  calculateVertices() {\n    throw new Error(\"calculateVertices must be implemented by subclasses\");\n  }\n  \n  /**\n   * Adds family-specific structural parameters to the plugin interface\n   * @abstract\n   */\n  addFamilyParameters() {\n    throw new Error(\"addFamilyParameters must be implemented by subclasses\");\n  }\n  \n  /**\n   * Generates the polytope geometry based on current parameters\n   * \n   */\n  createPolytope() {\n    this.vertices = this.calculateVertices();\n    // Use the function variable we defined at the top\n    const faces = QuickHullFunc(this.vertices, { skipTriangulation: true });\n    this.faces = faces;\n\n    const edgeSet = new Set();\n    this.faces.forEach(face => {\n      const n = face.length;\n      for (let i = 0; i < n; i++) {\n        const a = face[i], b = face[(i + 1) % n];\n        const key = a < b ? `${a}-${b}` : `${b}-${a}`;\n        edgeSet.add(key);\n      }\n    });\n    this.edges = Array.from(edgeSet, key => key.split('-').map(Number));\n  }\n  \n  /**\n   * Creates a THREE.js mesh from the current polytope\n   * @returns {THREE.Group} The mesh\n   */\n  createMesh() {\n    // Use the meshFromFaces helper function\n    return meshFromFaces(this.plugin, this.vertices, this.faces, this.edges);\n  }\n}\n\nexport default PolytopeFamily;\n","/**\n * Creates a THREE.js mesh from a collection of polygonal faces\n * with automatic resource tracking via Plugin3D\n * \n * @param {Plugin3D} plugin - The plugin instance\n * @param {Array<Array<number>>} vertices - Array of vertex coordinates [x,y,z]\n * @param {Array<Array<number>>} faces - Array of faces, where each face is an array of vertex indices\n * @param {Array<number>} [edges] - Optional array of edges, where each edge is a pair of vertex indices\n * @returns {THREE.Group} A THREE.js group containing the mesh\n */\nexport function meshFromFaces(plugin, vertices, faces, edges) {\n  const { THREE } = plugin.renderEnv;\n  \n  // Create a group to hold all the meshes\n  const group = plugin.createGroup();\n  \n  // Get the color palette from plugin parameters\n  const paletteName = plugin.getParameter('colorPalette') || 'default';\n  const colorPalette = plugin.core.colorSchemeManager.getPalette(paletteName);\n  \n  // Get the opacity\n  const opacity = plugin.getParameter('opacity') || 0.85;\n  const transparent = opacity < 1.0;\n  \n  // Process each face\n  faces.forEach((face, faceIndex) => {\n    if (face.length < 3) return; // Skip degenerate faces\n    \n    // Get color for this face from the palette\n    const color = new THREE.Color(colorPalette[faceIndex % colorPalette.length]);\n    \n    // Create a geometry for this face and register it with Plugin3D\n    const geometry = plugin.addGeometry(new THREE.BufferGeometry());\n    \n    // Create position array for vertices\n    const positions = [];\n    for (const vertexIndex of face) {\n      if (vertexIndex === undefined || vertexIndex < 0 || vertexIndex >= vertices.length) {\n        console.error(`Invalid vertex index ${vertexIndex} in face ${faceIndex}`);\n        return; // Skip this face\n      }\n      const vertex = vertices[vertexIndex];\n      positions.push(vertex[0], vertex[1], vertex[2]);\n    }\n    \n    // Set the position attribute\n    geometry.setAttribute('position', new THREE.Float32BufferAttribute(positions, 3));\n    \n    // Triangulate the face with a fan triangulation\n    const indices = [];\n    for (let i = 1; i < face.length - 1; i++) {\n      indices.push(0, i, i + 1);\n    }\n    \n    // Set the index attribute\n    geometry.setIndex(indices);\n    \n    // Compute normals\n    geometry.computeVertexNormals();\n    \n    // Create material and register it with Plugin3D\n    const material = plugin.addMaterial(new THREE.MeshStandardMaterial({\n      color: color,\n      transparent: transparent,\n      opacity: opacity,\n      side: THREE.DoubleSide\n    }));\n    \n    // Create mesh and add to group with Plugin3D tracking\n    const mesh = plugin.addMesh(new THREE.Mesh(geometry, material));\n    group.add(mesh);\n  });\n  \n  // Add edges if provided\n  if (edges && plugin.getParameter('showEdges')) {\n    const edgeColor = new THREE.Color(0x000000);\n    const edgeMaterial = plugin.addMaterial(new THREE.LineBasicMaterial({ \n      color: edgeColor,\n      transparent: transparent,\n      opacity: Math.min(1, opacity + 0.1)\n    }));\n    \n    edges.forEach(edge => {\n      if (edge[0] === undefined || edge[1] === undefined || \n          edge[0] < 0 || edge[0] >= vertices.length || \n          edge[1] < 0 || edge[1] >= vertices.length) {\n        console.error(`Invalid edge indices: ${edge}`);\n        return; // Skip this edge\n      }\n      \n      const start = vertices[edge[0]];\n      const end = vertices[edge[1]];\n      \n      if (!start || !end) {\n        console.error(`Vertex missing for edge ${edge}`);\n        return; // Skip this edge\n      }\n      \n      const points = [\n        new THREE.Vector3(start[0], start[1], start[2]),\n        new THREE.Vector3(end[0], end[1], end[2])\n      ];\n      \n      const geometry = plugin.addGeometry(new THREE.BufferGeometry().setFromPoints(points));\n      const line = plugin.addMesh(new THREE.Line(geometry, edgeMaterial));\n      group.add(line);\n    });\n  }\n  \n  return group;\n}\n"],"names":["BasePlugin","constructor","core","metadata","this","id","name","renderingType","Error","description","isLoaded","_eventHandlers","_animationHandlers","_visualParameters","_structuralParameters","_advancedParameters","load","console","log","concat","renderEnv","getRenderingEnvironment","start","error","unload","_cancelAllAnimations","_removeAllEventHandlers","addSlider","label","defaultValue","options","arguments","length","undefined","group","param","type","default","min","max","step","_addParameter","addCheckbox","addColor","addColorPalette","paletteInfo","getPaletteInfo","currentPalette","getCurrentPaletteName","map","palette","value","addDropdown","addNumber","addText","push","warn","groupPrefix","charAt","toUpperCase","slice","addMethodName","removeParameter","result","removeFromList","list","index","findIndex","p","splice","emptyParameters","setParameter","changeParameter","getParameter","getAllParameters","addAction","callback","removeAction","refresh","requestAnimation","animationManager","handler","cancelAnimation","indexOf","forEach","onParameterChanged","parameterId","handleInteraction","data","_this$core3","target","off","_this$core","removeParameterCallback","_this$core2","removeActionCallback","events","_handleParameterChanged","_handleActionExecution","actionId","action","_actions","get","_len","args","Array","_key","uiManager","showError","message","getStructuralColor","element","colorSchemeManager","getMainColor","getMainColors","getFunctionalColor","purpose","onPaletteChanged","on","setCurrentPalette","paletteName","Plugin3D","super","_meshes","Set","_groups","_geometries","_materials","_textures","_lights","mainMeshGroup","_currentRenderMode","_currentRenderOptions","addMesh","mesh","add","addToScene","addGroup","addGeometry","geometry","addMaterial","material","addTexture","texture","addLight","light","createBox","THREE","geometryOptions","width","height","depth","widthSegments","heightSegments","depthSegments","BoxGeometry","Mesh","createSphere","radius","SphereGeometry","createCylinder","radiusTop","radiusBottom","radialSegments","openEnded","CylinderGeometry","createPlane","PlaneGeometry","createLineSegments","vertices","BufferGeometry","setFromPoints","lineSegments","LineSegments","createAmbientLight","lightOptions","color","intensity","AmbientLight","createDirectionalLight","position","castShadow","DirectionalLight","set","createPointLight","distance","decay","PointLight","createSpotLight","angle","Math","PI","penumbra","SpotLight","createStandardMaterial","MeshStandardMaterial","roughness","metalness","opacity","transparent","side","DoubleSide","createBasicMaterial","MeshBasicMaterial","wireframe","createLineMaterial","LineBasicMaterial","linewidth","object","scene","removeFromScene","remove","setMainMesh","meshGroup","applyRenderMode","createGroup","Group","setCameraPosition","x","y","z","camera","lookAt","resetCamera","mode","renderModeManager","colorPalette","getPalette","updateRenderProperties","properties","updateProperties","render","renderer","dispose","clear","PolytopeVisualization","families","currentFamily","discoverFamilies","setParameters","createPolytope","updateVisualization","response","fetch","ok","statusText","manifest","json","entry","module","file","family","FamilyClass","instance","_this$families$find","familyOptions","find","f","addFamilyParameters","newMeshGroup","createMesh","selectedFamily","_defineProperty","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","code","ids","t","keys","Object","exports","QuickHullFunc","window","QuickHull","catch","points","plugin","faces","edges","center","calculateCenter","sum","reduce","acc","vertex","count","calculateVertices","skipTriangulation","edgeSet","face","n","i","a","b","key","from","split","Number","faceIndex","Color","positions","vertexIndex","setAttribute","Float32BufferAttribute","indices","setIndex","computeVertexNormals","edgeColor","edgeMaterial","edge","end","Vector3","line","Line","meshFromFaces"],"sourceRoot":""}