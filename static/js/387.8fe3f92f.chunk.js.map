{"version":3,"file":"static/js/387.8fe3f92f.chunk.js","mappings":"wKAIe,MAAMA,UAAsBC,EAAAA,EACzCC,WAAAA,CAAYC,GACVC,MAAMD,EADgBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,gBAG3B,CAKAG,mBAAAA,GAEE,CAOFC,iBAAAA,GACE,MAGMC,EAAUC,MAAMC,KAAK,CAAEN,OAHnB,IAGgC,CAACO,EAAGC,IAAM,CAClDC,KAAKC,IAAI,EAAED,KAAKE,GAAGH,EAJX,GAKRC,KAAKG,IAAI,EAAEH,KAAKE,GAAGH,EALX,MAYJK,EAHOC,KAAKC,uBAAuB,EAAGC,GAGpBC,KAAIC,IAC1B,MAAMC,EAAId,MAbF,GAaWe,KAAK,GACxB,IAAK,MAAOZ,EAAGa,EAAGC,KAAMJ,EAAK,CAC3B,MAAOK,EAAGC,GAAMpB,EAAQI,IAAKiB,EAAGC,GAAMtB,EAAQiB,IAAKM,EAAGC,GAAMxB,EAAQkB,GAC9DO,EAAOpB,KAAKqB,KAAKL,EAAGF,IAAKK,EAAGJ,IAAOG,EAAGJ,IAAKG,EAAGF,IAAO,EAC3D,CAAChB,EAAEa,EAAEC,GAAGS,SAAQC,GAAKb,EAAEa,IAAMH,GAC/B,CACA,OAAOV,CAAC,IAIJc,EAAWpB,EACdqB,QAAO,CAACC,EAAKhB,IAAMgB,EAAIlB,KAAI,CAACmB,EAAE5B,IAAM4B,EAAIjB,EAAEX,MAAKH,MAxBxC,GAwBiDe,KAAK,IAC7DH,KAAIoB,GAAKA,EAAIxB,EAAWb,SAErBsC,EAAWzB,EAAWI,KAAIE,GAC9BA,EAAEF,KAAI,CAACsB,EAAI/B,IAAM+B,EAAKN,EAASzB,OAI3BgC,EAAQ,GACd,IAAK,IAAIhC,EAAI,EAAGA,EAAIQ,EAAKR,IAAK,CAC5B,MAAMiC,EAAIpC,MAlCF,GAkCWe,KAAK,GACxBqB,EAAEjC,GAAQ,EACViC,EAAEjC,EAAE,IAAM,EACVgC,EAAME,KAAKD,EACb,CAGA,MAAME,EAAS7B,KAAK8B,YAAYJ,GAG1BK,EAASP,EAASrB,KAAIE,GAC1BwB,EAAO1B,KAAIwB,GAAKA,EAAEP,QAAO,CAACG,EAAGS,EAAItC,IAAM6B,EAAIS,EAAG3B,EAAEX,IAAI,OAIhDuC,EAAOjC,KAAKjB,OAAOmD,aAAa,SAAW,EACjD,OAAOH,EAAO5B,KAAIe,GAAKA,EAAEf,KAAIgC,GAASA,EAAQF,KAChD,CAQAhC,sBAAAA,CAAuBP,EAAGc,GACxB,GAAIA,GAAKd,EAAI,EAAG,MAAO,CAAC,IACxB,MAAM0C,EAAM,GACZ,IAAK,IAAI7B,EAAIb,EAAI,EAAGa,EAAIC,EAAGD,IACzB,IAAK,MAAM8B,KAAKrC,KAAKC,uBAAuBP,EAAGa,GAC7C,IAAK,MAAM+B,KAAKtC,KAAKC,uBAAuBM,EAAGC,GAC7C4B,EAAIR,KAAK,IAAIS,KAAMC,EAAG,CAAC5C,EAAGa,EAAGC,KAInC,OAAO4B,CACT,CAOAN,WAAAA,CAAYS,GACV,MAAMC,EAAQ,GACd,IAAK,IAAItB,KAAKqB,EAAM,CAElB,IAAIlC,EAAIa,EAAEuB,QAEV,IAAK,IAAIC,KAAKF,EAAO,CACnB,MAEMG,EAFQD,EAAEtB,QAAO,CAACG,EAAGqB,EAAIlD,IAAM6B,EAAIqB,EAAK1B,EAAExB,IAAI,GACtCgD,EAAEtB,QAAO,CAACG,EAAGqB,IAAOrB,EAAIqB,EAAKA,GAAI,GAE/CvC,EAAIA,EAAEF,KAAI,CAACsB,EAAI/B,IAAM+B,EAAKkB,EAAQD,EAAEhD,IACtC,CACA,MAAMmD,EAAOlD,KAAKmD,SAASzC,GACvBwC,EAAO,MACTL,EAAMZ,KAAKvB,EAAEF,KAAI4C,GAAKA,EAAIF,IAE9B,CACA,OAAOL,CACT,E","sources":["lib/plugins/polytope-viewer/families/Associahedron.js"],"sourcesContent":["// src/plugins/polytope-viewer/families/Associahedron.js\n\nimport PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class Associahedron extends PolytopeFamily {\n  constructor(plugin, name = \"Associahedron\") {\n    super(plugin, name);\n    // Currently no parameters besides the standard size\n  }\n  \n  /**\n   * Add parameters specific to Associahedron\n   */\n  addFamilyParameters() {\n    // Just use the default size parameter from the framework\n    // Could add polygon size parameter in the future if desired\n  }\n  \n  /**\n   * Calculate vertices for the Associahedron\n   * Based on triangulations of a hexagon\n   */\n  calculateVertices() {\n    const P = 6;  // hexagon → 3D associahedron\n    \n    // 1) place P-gon vertices on unit circle\n    const polygon = Array.from({ length: P }, (_, i) => [\n      Math.cos(2*Math.PI*i/P),\n      Math.sin(2*Math.PI*i/P)\n    ]);\n\n    // 2) list all triangulations of the hexagon\n    const tris = this.generateTriangulations(0, P - 1);\n\n    // 3) build the \"area‐weight\" vectors in R^P\n    const weightVecs = tris.map(tri => {\n      const w = Array(P).fill(0);\n      for (const [i, k, j] of tri) {\n        const [x1,y1] = polygon[i], [x2,y2] = polygon[k], [x3,y3] = polygon[j];\n        const area = Math.abs((x2-x1)*(y3-y1) - (x3-x1)*(y2-y1)) / 2;\n        [i,k,j].forEach(v => w[v] += area);\n      }\n      return w;\n    });\n\n    // 4) compute centroid and center them in the hyperplane ∑ w_i = const\n    const centroid = weightVecs\n      .reduce((acc, w) => acc.map((a,i) => a + w[i]), Array(P).fill(0))\n      .map(s => s / weightVecs.length);\n\n    const centered = weightVecs.map(w =>\n      w.map((wi, i) => wi - centroid[i])\n    );\n\n    // 5) choose three raw difference‐vectors e_i − e_{i+1}, i=0..P−4\n    const diffs = [];\n    for (let i = 0; i < P-3; i++) {\n      const b = Array(P).fill(0);\n      b[i]   =  1;\n      b[i+1] = -1;\n      diffs.push(b);\n    }\n\n    // 6) orthonormalize to avoid skew\n    const basis3 = this.gramSchmidt(diffs);\n\n    // 7) project each centered weight vector onto the 3 basis vectors\n    const verts3 = centered.map(w =>\n      basis3.map(b => b.reduce((s, bi, i) => s + bi*w[i], 0))\n    );\n\n    // Apply size factor from parameters\n    const size = this.plugin.getParameter('size') || 1.0;\n    return verts3.map(v => v.map(coord => coord * size));\n  }\n  \n  /**\n   * Generate all triangulations of vertices [i..j] of a convex P-gon\n   * @param {number} i - Start vertex index\n   * @param {number} j - End vertex index\n   * @returns {Array} Array of triangulations\n   */\n  generateTriangulations(i, j) {\n    if (j <= i + 1) return [[]];\n    const all = [];\n    for (let k = i + 1; k < j; k++) {\n      for (const L of this.generateTriangulations(i, k)) {\n        for (const R of this.generateTriangulations(k, j)) {\n          all.push([...L, ...R, [i, k, j]]);\n        }\n      }\n    }\n    return all;\n  }\n  \n  /**\n   * Perform Gram–Schmidt orthogonalization\n   * @param {Array} vecs - Array of vectors\n   * @returns {Array} Orthonormal basis\n   */\n  gramSchmidt(vecs) {\n    const basis = [];\n    for (let v of vecs) {\n      // Make a copy\n      let w = v.slice();\n      // Subtract projections onto earlier basis vectors\n      for (let u of basis) {\n        const dotUV = u.reduce((s, ui, i) => s + ui * v[i], 0);\n        const dotUU = u.reduce((s, ui) => s + ui * ui, 0);\n        const coeff = dotUV / dotUU;\n        w = w.map((wi, i) => wi - coeff * u[i]);\n      }\n      const norm = Math.hypot(...w);\n      if (norm > 1e-8) {\n        basis.push(w.map(x => x / norm));\n      }\n    }\n    return basis;\n  }\n}"],"names":["Associahedron","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","addFamilyParameters","calculateVertices","polygon","Array","from","_","i","Math","cos","PI","sin","weightVecs","this","generateTriangulations","P","map","tri","w","fill","k","j","x1","y1","x2","y2","x3","y3","area","abs","forEach","v","centroid","reduce","acc","a","s","centered","wi","diffs","b","push","basis3","gramSchmidt","verts3","bi","size","getParameter","coord","all","L","R","vecs","basis","slice","u","coeff","ui","norm","hypot","x"],"sourceRoot":""}