{"version":3,"file":"static/js/60.e38a2aad.chunk.js","mappings":"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","sources":["lib/plugins/polytope-viewer/families/PlatonicSolids.js"],"sourcesContent":["import PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class PlatonicSolids extends PolytopeFamily {\n  constructor(plugin, name = \"Platonic Solids\") {\n    super(plugin, name);\n    \n    // Define solid types\n    this.solidTypes = [\n      { value: 'tetrahedron', label: 'Tetrahedron' },\n      { value: 'cube', label: 'Cube' },\n      { value: 'octahedron', label: 'Octahedron' },\n      { value: 'dodecahedron', label: 'Dodecahedron' },\n      { value: 'icosahedron', label: 'Icosahedron' }\n    ];\n    \n    // Set default type\n    this.currentType = 'tetrahedron';\n  }\n  \n  /**\n   * Add parameters specific to Platonic solids\n   */\n  addFamilyParameters() {\n    // Add parameter to select solid type\n    this.plugin.addDropdown(\n      'solidType',\n      'Solid Type',\n      'tetrahedron',\n      this.solidTypes,\n      'structural'\n    );\n  }\n  \n  /**\n   * Calculate vertices based on the selected solid type\n   */\n  calculateVertices() {\n    // Get parameters\n    this.currentType = this.plugin.getParameter('solidType') || 'tetrahedron';\n    const size = this.plugin.getParameter('size') || 1.0;\n    \n    // Generate vertices based on solid type\n    switch (this.currentType) {\n      case 'tetrahedron':\n        return this.generateTetrahedron(size);\n      case 'cube':\n        return this.generateCube(size);\n      case 'octahedron':\n        return this.generateOctahedron(size);\n      case 'dodecahedron':\n        return this.generateDodecahedron(size);\n      case 'icosahedron':\n        return this.generateIcosahedron(size);\n      default:\n        return this.generateTetrahedron(size);\n    }\n  }\n  \n  /**\n   * Generate vertices for a tetrahedron\n   * @param {number} size - Size factor\n   */\n  generateTetrahedron(size) {\n    // Regular tetrahedron centered at origin\n    const a = size * 1.0;\n    return [\n      [a, a, a],     // (1, 1, 1)\n      [-a, -a, a],   // (-1, -1, 1)\n      [-a, a, -a],   // (-1, 1, -1)\n      [a, -a, -a]    // (1, -1, -1)\n    ];\n  }\n  \n  /**\n   * Generate vertices for a cube\n   * @param {number} size - Size factor\n   */\n  generateCube(size) {\n    // Unit cube centered at origin\n    const a = size * 0.5;\n    return [\n      [-a, -a, -a], // 0: (-1, -1, -1)\n      [a, -a, -a],  // 1: (1, -1, -1)\n      [a, a, -a],   // 2: (1, 1, -1)\n      [-a, a, -a],  // 3: (-1, 1, -1)\n      [-a, -a, a],  // 4: (-1, -1, 1)\n      [a, -a, a],   // 5: (1, -1, 1)\n      [a, a, a],    // 6: (1, 1, 1)\n      [-a, a, a]    // 7: (-1, 1, 1)\n    ];\n  }\n  \n  /**\n   * Generate vertices for an octahedron\n   * @param {number} size - Size factor\n   */\n  generateOctahedron(size) {\n    // Regular octahedron centered at origin\n    return [\n      [size, 0, 0],    // (1, 0, 0)\n      [0, size, 0],    // (0, 1, 0)\n      [0, 0, size],    // (0, 0, 1)\n      [-size, 0, 0],   // (-1, 0, 0)\n      [0, -size, 0],   // (0, -1, 0)\n      [0, 0, -size]    // (0, 0, -1)\n    ];\n  }\n  \n  /**\n   * Generate vertices for a dodecahedron\n   * @param {number} size - Size factor\n   */\n  generateDodecahedron(size) {\n    // Values needed for dodecahedron construction\n    const phi = (1 + Math.sqrt(5)) / 2; // Golden ratio\n    const a = size * 0.5;\n    const b = size * 0.5 * phi;\n    const vertices = [];\n    \n    // Generate vertices based on coordinate permutations\n    // (±1, ±1, ±1)\n    for (let i = 0; i < 8; i++) {\n      const x = a * ((i & 1) ? 1 : -1);\n      const y = a * ((i & 2) ? 1 : -1);\n      const z = a * ((i & 4) ? 1 : -1);\n      vertices.push([x, y, z]);\n    }\n    \n    // (0, ±φ, ±1/φ)\n    vertices.push([0, b, a/phi]);\n    vertices.push([0, b, -a/phi]);\n    vertices.push([0, -b, a/phi]);\n    vertices.push([0, -b, -a/phi]);\n    \n    // (±1/φ, 0, ±φ)\n    vertices.push([a/phi, 0, b]);\n    vertices.push([-a/phi, 0, b]);\n    vertices.push([a/phi, 0, -b]);\n    vertices.push([-a/phi, 0, -b]);\n    \n    // (±φ, ±1/φ, 0)\n    vertices.push([b, a/phi, 0]);\n    vertices.push([b, -a/phi, 0]);\n    vertices.push([-b, a/phi, 0]);\n    vertices.push([-b, -a/phi, 0]);\n    \n    return vertices;\n  }\n  \n  /**\n   * Generate vertices for an icosahedron\n   * @param {number} size - Size factor\n   */\n  generateIcosahedron(size) {\n    // Golden ratio needed for icosahedron\n    const phi = (1 + Math.sqrt(5)) / 2;\n    const a = size;\n    const b = size * phi;\n    const vertices = [];\n    \n    // Generate the 12 vertices of the icosahedron\n    // (0, ±1, ±φ)\n    vertices.push([0, a, b]);\n    vertices.push([0, a, -b]);\n    vertices.push([0, -a, b]);\n    vertices.push([0, -a, -b]);\n    \n    // (±1, ±φ, 0)\n    vertices.push([a, b, 0]);\n    vertices.push([a, -b, 0]);\n    vertices.push([-a, b, 0]);\n    vertices.push([-a, -b, 0]);\n    \n    // (±φ, 0, ±1)\n    vertices.push([b, 0, a]);\n    vertices.push([-b, 0, a]);\n    vertices.push([b, 0, -a]);\n    vertices.push([-b, 0, -a]);\n    \n    return vertices;\n  }\n}\n"],"names":["PlatonicSolids","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","this","solidTypes","value","label","currentType","addFamilyParameters","addDropdown","calculateVertices","getParameter","size","generateTetrahedron","generateCube","generateOctahedron","generateDodecahedron","generateIcosahedron","a","phi","Math","sqrt","b","vertices","i","x","y","z","push"],"sourceRoot":""}