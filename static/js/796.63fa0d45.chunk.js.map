{"version":3,"file":"static/js/796.63fa0d45.chunk.js","mappings":"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","sources":["lib/plugins/polytope-viewer/families/RootPolytope.js"],"sourcesContent":["// src/plugins/polytope-viewer/families/RootPolytope.js\n\nimport PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class RootPolytope extends PolytopeFamily {\n  constructor(plugin, name = \"Root Polytope\") {\n    super(plugin, name);\n    \n    // Define root system types\n    this.types = [\n      { value: 'A3', label: 'Type A₃' },\n      { value: 'B3', label: 'Type B₃' },\n      { value: 'C3', label: 'Type C₃' },\n      { value: 'D3', label: 'Type D₃' },\n      { value: 'H3', label: 'Type H₃' }\n    ];\n    \n    // Set default type\n    this.currentType = 'A3';\n  }\n  \n  /**\n   * Add parameters specific to Root Polytope\n   */\n  addFamilyParameters() {\n    // Add parameter to select root system type\n    this.plugin.addDropdown(\n      'rootSystemType',\n      'Root System',\n      'A3',\n      this.types,\n      'structural'\n    );\n  }\n  \n  /**\n   * Calculate vertices for the Root Polytope\n   */\n  calculateVertices() {\n    // Get the selected type\n    this.currentType = this.plugin.getParameter('rootSystemType') || 'A3';\n    \n    // Generate vertices based on type\n    let vertices;\n    switch (this.currentType) {\n      case 'B3':\n        vertices = this.buildTypeB3();\n        break;\n      case 'C3':\n        vertices = this.buildTypeC3();\n        break;\n      case 'D3':\n        vertices = this.buildTypeD3();\n        break;\n      case 'H3':\n        vertices = this.buildTypeH3();\n        break;\n      default:\n        vertices = this.buildTypeA3();\n        break;\n    }\n    \n    // Apply size factor from parameters\n    const size = this.plugin.getParameter('size') || 1.0;\n    return vertices.map(v => v.map(coord => coord * size));\n  }\n  \n  /**\n   * Build Type A₃ root system\n   * @returns {Array} Vertices for A₃ root system\n   */\n  buildTypeA3() {\n    const roots4 = [];\n    for (let i = 0; i < 4; i++) for (let j = i + 1; j < 4; j++) {\n      const v = [0, 0, 0, 0]; v[i] = 1; v[j] = -1;\n      roots4.push(v); roots4.push(v.map(x => -x));\n    }\n    \n    const basis4 = [\n      [1, -1, 0, 0],\n      [0, 1, -1, 0],\n      [0, 0, 1, -1]\n    ];\n    const ons = this.orthonormalBasis(basis4);\n    return roots4.map(v4 => ons.map(e => this.dot(v4, e)));\n  }\n  \n  /**\n   * Build Type B₃ root system\n   * @returns {Array} Vertices for B₃ root system\n   */\n  buildTypeB3() {\n    const roots = [];\n    // Short roots: ±e_i\n    for (let i = 0; i < 3; i++) {\n      const v = [0, 0, 0]; v[i] = 1;\n      roots.push([...v]); roots.push(v.map(x => -x));\n    }\n    // Long roots: ±e_i ± e_j\n    for (let i = 0; i < 3; i++) for (let j = i + 1; j < 3; j++)\n      for (const si of [-1, 1]) for (const sj of [-1, 1]) {\n        const v = [0, 0, 0]; v[i] = si; v[j] = sj;\n        roots.push(v);\n      }\n    return roots;\n  }\n  \n  /**\n   * Build Type C₃ root system\n   * @returns {Array} Vertices for C₃ root system\n   */\n  buildTypeC3() {\n    const roots = [];\n    // Long roots: ±2e_i\n    for (let i = 0; i < 3; i++) {\n      const v = [0, 0, 0]; v[i] = 2;\n      roots.push([...v]); roots.push(v.map(x => -x));\n    }\n    // Medium roots: ±e_i ± e_j\n    for (let i = 0; i < 3; i++) for (let j = i + 1; j < 3; j++)\n      for (const si of [-1, 1]) for (const sj of [-1, 1]) {\n        const v = [0, 0, 0]; v[i] = si; v[j] = sj;\n        roots.push(v);\n      }\n    // Short roots: ±e_i (if needed for completeness)\n    for (let i = 0; i < 3; i++) {\n      const v = [0, 0, 0]; v[i] = 1;\n      roots.push([...v]); roots.push(v.map(x => -x));\n    }\n    return roots;\n  }\n  \n  /**\n   * Build Type D₃ root system\n   * @returns {Array} Vertices for D₃ root system\n   */\n  buildTypeD3() {\n    const roots = [];\n    // Roots: ±e_i ± e_j\n    for (let i = 0; i < 3; i++) for (let j = i + 1; j < 3; j++) {\n      for (const si of [-1, 1]) for (const sj of [-1, 1]) {\n        const v = [0, 0, 0]; v[i] = si; v[j] = sj;\n        roots.push(v);\n      }\n    }\n    return roots;\n  }\n  \n  /**\n   * Build Type H₃ root system\n   * @returns {Array} Vertices for H₃ root system\n   */\n  buildTypeH3() {\n    const phi = (1 + Math.sqrt(5)) / 2;\n    const icosaVerts = [\n      [0, 1, phi], [0, -1, phi], [0, 1, -phi], [0, -1, -phi],\n      [1, phi, 0], [-1, phi, 0], [1, -phi, 0], [-1, -phi, 0],\n      [phi, 0, 1], [-phi, 0, 1], [phi, 0, -1], [-phi, 0, -1]\n    ];\n    \n    // Find edge length of icosahedron\n    let edgeLen = Infinity;\n    for (let i = 0; i < icosaVerts.length; i++) {\n      for (let j = i + 1; j < icosaVerts.length; j++) {\n        const dx = icosaVerts[i][0] - icosaVerts[j][0];\n        const dy = icosaVerts[i][1] - icosaVerts[j][1];\n        const dz = icosaVerts[i][2] - icosaVerts[j][2];\n        const dist = Math.hypot(dx, dy, dz);\n        if (dist > 1e-6 && dist < edgeLen) edgeLen = dist;\n      }\n    }\n    \n    // Collect midpoints of edges (these form the H₃ root system)\n    const mids = [];\n    for (let i = 0; i < icosaVerts.length; i++) {\n      for (let j = i + 1; j < icosaVerts.length; j++) {\n        const a = icosaVerts[i], b = icosaVerts[j];\n        const dx = a[0] - b[0], dy = a[1] - b[1], dz = a[2] - b[2];\n        const dist = Math.hypot(dx, dy, dz);\n        if (Math.abs(dist - edgeLen) < 1e-6) {\n          mids.push([\n            (a[0] + b[0]) / 2,\n            (a[1] + b[1]) / 2,\n            (a[2] + b[2]) / 2\n          ]);\n        }\n      }\n    }\n    \n    return mids;\n  }\n  \n  /**\n   * Calculate dot product of two vectors\n   * @param {Array} u - First vector\n   * @param {Array} v - Second vector\n   * @returns {number} Dot product\n   */\n  dot(u, v) { \n    return u.reduce((s, ui, k) => s + ui * v[k], 0); \n  }\n  \n  /**\n   * Subtract two vectors\n   * @param {Array} u - First vector\n   * @param {Array} v - Second vector\n   * @returns {Array} Resulting vector\n   */\n  sub(u, v) { \n    return u.map((ui, k) => ui - v[k]); \n  }\n  \n  /**\n   * Scale a vector by a scalar\n   * @param {Array} u - Vector\n   * @param {number} s - Scalar\n   * @returns {Array} Scaled vector\n   */\n  scale(u, s) { \n    return u.map(ui => ui * s); \n  }\n  \n  /**\n   * Calculate norm (length) of a vector\n   * @param {Array} u - Vector\n   * @returns {number} Norm\n   */\n  norm(u) { \n    return Math.hypot(...u); \n  }\n  \n  /**\n   * Create an orthonormal basis from a set of vectors\n   * @param {Array} vectors - Array of vectors\n   * @returns {Array} Orthonormal basis\n   */\n  orthonormalBasis(vectors) {\n    const es = [];\n    for (let v of vectors) {\n      let u = [...v];\n      for (let e of es) u = this.sub(u, this.scale(e, this.dot(u, e)));\n      const n = this.norm(u);\n      if (n > 1e-8) es.push(this.scale(u, 1 / n));\n    }\n    return es;\n  }\n}"],"names":["RootPolytope","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","this","types","value","label","currentType","addFamilyParameters","addDropdown","calculateVertices","vertices","getParameter","buildTypeB3","buildTypeC3","buildTypeD3","buildTypeH3","buildTypeA3","size","map","v","coord","roots4","i","j","push","x","ons","orthonormalBasis","v4","e","dot","roots","si","sj","phi","Math","sqrt","icosaVerts","edgeLen","Infinity","dx","dy","dz","dist","hypot","mids","a","b","abs","u","reduce","s","ui","k","sub","scale","norm","vectors","es","n"],"sourceRoot":""}