{"version":3,"file":"static/js/735.cd72ceb0.chunk.js","mappings":"yKAEe,MAAMA,UAA0BC,EAAAA,EAC7CC,WAAAA,CAAYC,GACVC,MAAMD,EADgBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,sBAIzBG,KAAKC,WAAa,CAChB,CAAEC,MAAO,uBAAwBC,MAAO,yBACxC,CAAED,MAAO,gBAAiBC,MAAO,iBACjC,CAAED,MAAO,gBAAiBC,MAAO,kBACjC,CAAED,MAAO,sBAAuBC,MAAO,wBACvC,CAAED,MAAO,sBAAuBC,MAAO,uBACvC,CAAED,MAAO,yBAA0BC,MAAO,2BAC1C,CAAED,MAAO,WAAYC,MAAO,aAC5B,CAAED,MAAO,oBAAqBC,MAAO,qBACrC,CAAED,MAAO,wBAAyBC,MAAO,0BACzC,CAAED,MAAO,uBAAwBC,MAAO,yBACxC,CAAED,MAAO,yBAA0BC,MAAO,0BAC1C,CAAED,MAAO,6BAA8BC,MAAO,+BAC9C,CAAED,MAAO,mBAAoBC,MAAO,sBAItCH,KAAKI,YAAc,uBAGnBJ,KAAKK,aAAe,KAGpBL,KAAKM,WACP,CAKAC,mBAAAA,GAEEP,KAAKL,OAAOa,YACV,YACA,aACAR,KAAKI,YACLJ,KAAKC,WACL,aAGJ,CAMA,eAAMK,GACJ,IACE,MAAMG,QAAiBC,MAAM,kFAC7B,IAAKD,EAASE,GACZ,MAAM,IAAIC,MAAM,2CAADC,OAA4CJ,EAASK,aAGtEd,KAAKK,mBAAqBI,EAASM,OACnCC,QAAQC,IAAI,mBAADJ,OAAoBK,OAAOC,KAAKnB,KAAKK,cAAcP,OAAM,uBACtE,CAAE,MAAOsB,GACPJ,QAAQI,MAAM,0CAA2CA,GAEzDpB,KAAKK,aAAe,CAAC,CACvB,CACF,CAKAgB,iBAAAA,GAEErB,KAAKI,YAAcJ,KAAKL,OAAO2B,aAAa,cAAgBtB,KAAKI,YACjE,MAAMmB,EAAOvB,KAAKL,OAAO2B,aAAa,SAAW,EAGjD,IAAKtB,KAAKK,eAAiBL,KAAKK,aAAaL,KAAKI,aAChD,MAAO,GAOT,OAHiBJ,KAAKK,aAAaL,KAAKI,aAAaoB,SAGrCC,KAAIC,GAAK,CAACA,EAAE,GAAKH,EAAMG,EAAE,GAAKH,EAAMG,EAAE,GAAKH,IAC7D,E","sources":["lib/plugins/polytope-viewer/families/ArchimedeanSolids.js"],"sourcesContent":["import PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class ArchimedeanSolids extends PolytopeFamily {\n  constructor(plugin, name = \"Archimedean Solids\") {\n    super(plugin, name);\n    \n    // Define solid types - names for display\n    this.solidTypes = [\n      { value: 'truncatedTetrahedron', label: 'Truncated Tetrahedron' },\n      { value: 'cuboctahedron', label: 'Cuboctahedron' },\n      { value: 'truncatedCube', label: 'Truncated Cube' },\n      { value: 'truncatedOctahedron', label: 'Truncated Octahedron' },\n      { value: 'rhombicuboctahedron', label: 'Rhombicuboctahedron' },\n      { value: 'truncatedCuboctahedron', label: 'Truncated Cuboctahedron' },\n      { value: 'snubCube', label: 'Snub Cube' },\n      { value: 'icosidodecahedron', label: 'Icosidodecahedron' },\n      { value: 'truncatedDodecahedron', label: 'Truncated Dodecahedron' },\n      { value: 'truncatedIcosahedron', label: 'Truncated Icosahedron' },\n      { value: 'rhombicosidodecahedron', label: 'Rhombicosidodecahedron' },\n      { value: 'truncatedIcosidodecahedron', label: 'Truncated Icosidodecahedron' },\n      { value: 'snubDodecahedron', label: 'Snub Dodecahedron' }\n    ];\n    \n    // Set default type\n    this.currentType = 'truncatedTetrahedron';\n    \n    // Will store the loaded polyhedra data\n    this.polytopeData = null;\n    \n    // Load the data when constructed\n    this._loadData();\n  }\n  \n  /**\n   * Add parameters specific to Archimedean solids\n   */\n  addFamilyParameters() {\n    // Add parameter to select solid type\n    this.plugin.addDropdown(\n      'solidType',\n      'Solid Type',\n      this.currentType,\n      this.solidTypes,\n      'structural'\n    );\n    \n  }\n  \n  /**\n   * Load the pre-computed polyhedra data\n   * @private\n   */\n  async _loadData() {\n    try {\n      const response = await fetch('/math-visualizer/plugins/polytope-viewer/families/data/archimedean_solids.json');\n      if (!response.ok) {\n        throw new Error(`Failed to load Archimedean solids data: ${response.statusText}`);\n      }\n      \n      this.polytopeData = await response.json();\n      console.log(`Loaded data for ${Object.keys(this.polytopeData).length} Archimedean solids`);\n    } catch (error) {\n      console.error(\"Failed to load Archimedean solids data:\", error);\n      // Fallback to empty data\n      this.polytopeData = {};\n    }\n  }\n  \n  /**\n   * Calculate vertices based on the selected solid type\n   */\n  calculateVertices() {\n    // Get parameters\n    this.currentType = this.plugin.getParameter('solidType') || this.currentType;\n    const size = this.plugin.getParameter('size') || 1.0;\n    \n    // If data isn't loaded yet or type isn't found, return empty array\n    if (!this.polytopeData || !this.polytopeData[this.currentType]) {\n      return [];\n    }\n    \n    // Get vertices from pre-computed data\n    const vertices = this.polytopeData[this.currentType].vertices;\n    \n    // Apply size scaling\n    return vertices.map(v => [v[0] * size, v[1] * size, v[2] * size]);\n  }\n  \n}\n"],"names":["ArchimedeanSolids","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","this","solidTypes","value","label","currentType","polytopeData","_loadData","addFamilyParameters","addDropdown","response","fetch","ok","Error","concat","statusText","json","console","log","Object","keys","error","calculateVertices","getParameter","size","vertices","map","v"],"sourceRoot":""}