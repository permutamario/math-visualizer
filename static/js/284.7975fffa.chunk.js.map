{"version":3,"file":"static/js/284.7975fffa.chunk.js","mappings":"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","sources":["lib/plugins/polytope-viewer/families/Permutahedron.js"],"sourcesContent":["// src/plugins/polytope-viewer/families/Permutahedron.js\n\nimport PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class Permutahedron extends PolytopeFamily {\n  constructor(plugin, name = \"Permutahedron\") {\n    super(plugin, name);\n    \n    // Define permutahedron types\n    this.types = [\n      { value: 'A3', label: 'Type A₃' },\n      { value: 'B3/C3', label: 'Type B₃/C₃' }\n    ];\n    \n    // Set default type\n    this.currentType = 'A3';\n  }\n  \n  /**\n   * Add parameters specific to Permutahedron\n   */\n  addFamilyParameters() {\n    // Add parameter to select permutahedron type\n    this.plugin.addDropdown(\n      'permutahedronType',\n      'Coxeter Type',\n      'A3',\n      this.types,\n      'structural'\n    );\n  }\n  \n  /**\n   * Calculate vertices for the Permutahedron\n   */\n  calculateVertices() {\n    // Get the selected type\n    this.currentType = this.plugin.getParameter('permutahedronType') || 'A3';\n    \n    // Generate vertices based on type\n    let vertices;\n    switch (this.currentType) {\n      case 'B3/C3':\n        vertices = this.buildTypeBC();\n        break;\n      default:\n        vertices = this.buildTypeA();\n        break;\n    }\n    \n    // Apply size factor from parameters\n    const size = this.plugin.getParameter('size') || 1.0;\n    return vertices.map(v => v.map(coord => coord * size));\n  }\n  \n  /**\n   * Build Type A₃ (S₄) permutahedron\n   * @returns {Array} Vertices for A₃ permutahedron\n   */\n  buildTypeA() {\n    const perms4 = this.permutations([1, 2, 3, 4]);\n    const basis = [[1, -1, 0, 0], [0, 1, -1, 0], [0, 0, 1, -1]];\n    const ons = this.orthonormalBasis(basis);\n    return perms4.map(p => ons.map(e => this.dot(p, e)));\n  }\n  \n  /**\n   * Build Type B₃/C₃ (signed S₃) permutahedron\n   * @returns {Array} Vertices for B₃/C₃ permutahedron\n   */\n  buildTypeBC() {\n    const base = [1, 2, 3];\n    const pts = this.signedPermutations(base);\n    const centroid = pts.reduce((c, p) => p.map((x, i) => c[i] + x), [0, 0, 0])\n                       .map(x => x / pts.length);\n    return pts.map(p => p.map((x, i) => x - centroid[i]));\n  }\n  \n  /**\n   * Calculate dot product of two vectors\n   * @param {Array} u - First vector\n   * @param {Array} v - Second vector\n   * @returns {number} Dot product\n   */\n  dot(u, v) { \n    return u.reduce((s, ui, k) => s + ui * v[k], 0); \n  }\n  \n  /**\n   * Subtract two vectors\n   * @param {Array} u - First vector\n   * @param {Array} v - Second vector\n   * @returns {Array} Resulting vector\n   */\n  sub(u, v) { \n    return u.map((ui, k) => ui - v[k]); \n  }\n  \n  /**\n   * Scale a vector by a scalar\n   * @param {Array} u - Vector\n   * @param {number} s - Scalar\n   * @returns {Array} Scaled vector\n   */\n  scale(u, s) { \n    return u.map(ui => ui * s); \n  }\n  \n  /**\n   * Calculate norm (length) of a vector\n   * @param {Array} u - Vector\n   * @returns {number} Norm\n   */\n  norm(u) { \n    return Math.hypot(...u); \n  }\n  \n  /**\n   * Create an orthonormal basis from a set of vectors\n   * @param {Array} vectors - Array of vectors\n   * @returns {Array} Orthonormal basis\n   */\n  orthonormalBasis(vectors) {\n    const es = [];\n    for (let v of vectors) {\n      let u = [...v];\n      for (let e of es) u = this.sub(u, this.scale(e, this.dot(u, e)));\n      const n = this.norm(u);\n      if (n > 1e-8) es.push(this.scale(u, 1 / n));\n    }\n    return es;\n  }\n  \n  /**\n   * Generate all permutations of an array\n   * @param {Array} arr - The array to permute\n   * @returns {Array} Array of permutations\n   */\n  permutations(arr) {\n    if (arr.length <= 1) return [arr];\n    return arr.flatMap((x, i) =>\n      this.permutations(arr.slice(0, i).concat(arr.slice(i + 1))).map(rest => [x, ...rest])\n    );\n  }\n  \n  /**\n   * Generate all signed permutations of an array\n   * @param {Array} arr - The array\n   * @returns {Array} Array of signed permutations\n   */\n  signedPermutations(arr) {\n    const signs = arr.map(() => [-1, 1]);\n    const allSigns = signs.reduce((acc, curr) => acc.flatMap(a => curr.map(s => [...a, s])), [[]]);\n    return this.permutations(arr).flatMap(p => allSigns.map(signs => p.map((v, i) => v * signs[i])));\n  }\n}"],"names":["Permutahedron","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","this","types","value","label","currentType","addFamilyParameters","addDropdown","calculateVertices","vertices","getParameter","buildTypeBC","buildTypeA","size","map","v","coord","perms4","permutations","ons","orthonormalBasis","p","e","dot","pts","signedPermutations","centroid","reduce","c","x","i","u","s","ui","k","sub","scale","norm","Math","hypot","vectors","es","n","push","arr","flatMap","slice","concat","rest","allSigns","acc","curr","a","signs"],"sourceRoot":""}