"use strict";(self.webpackChunkmath_visualizer_react=self.webpackChunkmath_visualizer_react||[]).push([[550],{7550:(t,i,e)=>{e.r(i),e.d(i,{default:()=>r});var a=e(8239);class r extends a.A{constructor(t){super(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Orbit Polytope"),this.defaultPoint=[1,2,2,3]}addFamilyParameters(){this.plugin.addNumber("point1","Point X\u2081",this.defaultPoint[0],{min:-5,max:5,step:.5},"structural"),this.plugin.addNumber("point2","Point X\u2082",this.defaultPoint[1],{min:-5,max:5,step:.5},"structural"),this.plugin.addNumber("point3","Point X\u2083",this.defaultPoint[2],{min:-5,max:5,step:.5},"structural"),this.plugin.addNumber("point4","Point X\u2084",this.defaultPoint[3],{min:-5,max:5,step:.5},"structural")}calculateVertices(){const t=[this.plugin.getParameter("point1")||this.defaultPoint[0],this.plugin.getParameter("point2")||this.defaultPoint[1],this.plugin.getParameter("point3")||this.defaultPoint[2],this.plugin.getParameter("point4")||this.defaultPoint[3]],i=this.permutations(t),e=this.projectTo3D(i),a=this.plugin.getParameter("size")||1;return e.map((t=>t.map((t=>t*a))))}permutations(t){return t.length<=1?[t]:t.flatMap(((i,e)=>this.permutations(t.slice(0,e).concat(t.slice(e+1))).map((t=>[i,...t]))))}projectTo3D(t){const i=t[0].length,e=[];for(let r=0;r<i-1;r++){const t=Array(i).fill(0);t[r]=1,t[i-1]=-1,e.push(t)}const a=this.gramSchmidt(e).slice(0,3);return t.map((t=>a.map((i=>this.dot(t,i)))))}dot(t,i){return t.reduce(((t,e,a)=>t+e*i[a]),0)}subtract(t,i){return t.map(((t,e)=>t-i[e]))}normalize(t){const i=Math.hypot(...t);return t.map((t=>t/i))}gramSchmidt(t){const i=[];for(let e of t){let t=[...e];for(let e of i){const i=this.dot(t,e);t=this.subtract(t,e.map((t=>t*i)))}Math.hypot(...t)>1e-8&&i.push(this.normalize(t))}return i}}}}]);
//# sourceMappingURL=550.31d628af.chunk.js.map