"use strict";(self.webpackChunkmath_visualizer_react=self.webpackChunkmath_visualizer_react||[]).push([[387],{387:(t,e,a)=>{a.r(e),a.d(e,{default:()=>s});var r=a(8239);class s extends r.A{constructor(t){super(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Associahedron")}addFamilyParameters(){}calculateVertices(){const t=Array.from({length:6},((t,e)=>[Math.cos(2*Math.PI*e/6),Math.sin(2*Math.PI*e/6)])),e=this.generateTriangulations(0,5).map((e=>{const a=Array(6).fill(0);for(const[r,s,n]of e){const[e,o]=t[r],[c,i]=t[s],[l,h]=t[n],u=Math.abs((c-e)*(h-o)-(l-e)*(i-o))/2;[r,s,n].forEach((t=>a[t]+=u))}return a})),a=e.reduce(((t,e)=>t.map(((t,a)=>t+e[a]))),Array(6).fill(0)).map((t=>t/e.length)),r=e.map((t=>t.map(((t,e)=>t-a[e])))),s=[];for(let i=0;i<3;i++){const t=Array(6).fill(0);t[i]=1,t[i+1]=-1,s.push(t)}const n=this.gramSchmidt(s),o=r.map((t=>n.map((e=>e.reduce(((e,a,r)=>e+a*t[r]),0))))),c=this.plugin.getParameter("size")||1;return o.map((t=>t.map((t=>t*c))))}generateTriangulations(t,e){if(e<=t+1)return[[]];const a=[];for(let r=t+1;r<e;r++)for(const s of this.generateTriangulations(t,r))for(const n of this.generateTriangulations(r,e))a.push([...s,...n,[t,r,e]]);return a}gramSchmidt(t){const e=[];for(let a of t){let t=a.slice();for(let s of e){const e=s.reduce(((t,e,r)=>t+e*a[r]),0)/s.reduce(((t,e)=>t+e*e),0);t=t.map(((t,a)=>t-e*s[a]))}const r=Math.hypot(...t);r>1e-8&&e.push(t.map((t=>t/r)))}return e}}}}]);
//# sourceMappingURL=387.8fe3f92f.chunk.js.map