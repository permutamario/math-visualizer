{"version":3,"file":"static/js/934.ffe31d60.chunk.js","mappings":"wKAIe,MAAMA,UAAoBC,EAAAA,EACvCC,WAAAA,CAAYC,GACVC,MAAMD,EADgBE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,cAG3B,CAKAG,mBAAAA,GACE,CAOFC,iBAAAA,GAEE,MAQMC,EARO,CACX,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GACnD,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GACnD,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GACnD,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,IAI/BC,KAAIC,IACxB,MAAMC,EAAOD,EAAEE,QAAO,CAACC,EAAEC,IAAMD,EAAEC,GAAE,GAAK,EACxC,OAAOJ,EAAED,KAAIK,GAAKA,EAAIH,GAAK,IAIvBI,EAAMA,CAACC,EAAEN,IAAMM,EAAEJ,QAAO,CAACC,EAAEI,EAAGC,IAAML,EAAII,EAAGP,EAAEQ,IAAG,GAEhDC,EAAQA,CAACH,EAAEH,IAAMG,EAAEP,KAAIQ,GAAMA,EAAKJ,IAIlCO,EAAQ,GADD,CAAC,CAAC,GAAG,EAAE,EAAE,GAAI,CAAC,EAAE,GAAG,EAAE,GAAI,CAAC,EAAE,EAAE,GAAG,IAGzCC,SAAQC,IACX,IAAIN,EAAI,IAAIM,GACZF,EAAMC,SAAQE,IACZ,MAAMC,EAAIT,EAAIC,EAAEO,GAChBP,EAXQS,EAACT,EAAEN,IAAMM,EAAEP,KAAI,CAACQ,EAAGC,IAAMD,EAAKP,EAAEQ,KAWpCO,CAAIT,EAAGG,EAAMI,EAAEC,GAAG,IAExB,MAAME,EAXKV,IAAKW,KAAKC,SAASZ,GAWpBa,CAAKb,GACXU,EAAI,MAAMN,EAAMU,KAAKX,EAAMH,EAAG,EAAEU,GAAG,IAIzC,MAAMK,EAASvB,EAASC,KAAIuB,GAAMZ,EAAMX,KAAIc,GAAKR,EAAIiB,EAAIT,OAGnDU,EAAOC,KAAKjC,OAAOkC,aAAa,SAAW,EACjD,OAAOJ,EAAOtB,KAAIC,GAAKA,EAAED,KAAI2B,GAASA,EAAQH,KAChD,E","sources":["lib/plugins/polytope-viewer/families/Cyclohedron.js"],"sourcesContent":["// src/plugins/polytope-viewer/families/Cyclohedron.js\n\nimport PolytopeFamily from '../PolytopeFamily.js';\n\nexport default class Cyclohedron extends PolytopeFamily {\n  constructor(plugin, name = \"Cyclohedron\") {\n    super(plugin, name);\n    // No additional parameters needed\n  }\n  \n  /**\n   * Add parameters specific to Cyclohedron\n   */\n  addFamilyParameters() {\n    // Just use the default size parameter from the framework\n  }\n  \n  /**\n   * Calculate vertices for the Cyclohedron\n   * Based on 4D tubings for the 4-cycle\n   */\n  calculateVertices() {\n    // Raw 4D tubings for the 4-cycle (20 vertices)\n    const raw4 = [\n      [0,1,2,3], [0,1,3,2], [0,2,1,2], [0,2,3,1], [0,3,2,1],\n      [1,0,2,3], [1,0,3,2], [1,2,0,2], [1,2,3,0], [1,3,2,0],\n      [2,0,1,3], [2,0,2,1], [2,1,0,3], [2,1,2,0], [2,3,0,1],\n      [2,3,1,0], [3,0,1,2], [3,1,0,2], [3,2,0,1], [3,2,1,0]\n    ];\n    \n    // Center into hyperplane sum=0\n    const centered = raw4.map(v => {\n      const mean = v.reduce((s,x) => s+x,0) / 4;\n      return v.map(x => x - mean);\n    });\n    \n    // Orthonormal basis via Gram-Schmidt\n    const dot = (u,v) => u.reduce((s,ui,i) => s + ui*v[i],0);\n    const sub = (u,v) => u.map((ui,i) => ui - v[i]);\n    const scale = (u,s) => u.map(ui => ui * s);\n    const norm = u => Math.hypot(...u);\n    \n    const rawB = [[1,-1,0,0], [0,1,-1,0], [0,0,1,-1]];\n    const basis = [];\n    \n    rawB.forEach(b => {\n      let u = [...b];\n      basis.forEach(e => { \n        const p = dot(u,e); \n        u = sub(u, scale(e,p)); \n      });\n      const n = norm(u);\n      if (n > 1e-8) basis.push(scale(u, 1/n));\n    });\n    \n    // Project to R^3\n    const verts3 = centered.map(v4 => basis.map(e => dot(v4, e)));\n    \n    // Apply size factor from parameters\n    const size = this.plugin.getParameter('size') || 1.0;\n    return verts3.map(v => v.map(coord => coord * size));\n  }\n}"],"names":["Cyclohedron","PolytopeFamily","constructor","plugin","super","arguments","length","undefined","addFamilyParameters","calculateVertices","centered","map","v","mean","reduce","s","x","dot","u","ui","i","scale","basis","forEach","b","e","p","sub","n","Math","hypot","norm","push","verts3","v4","size","this","getParameter","coord"],"sourceRoot":""}